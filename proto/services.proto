syntax = "proto3";

package pb;
import "user.proto";
import "post.proto";
import "recipe.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "portfolio-playground/pkg/proto;pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Cookbook"
    version: "1.0.0"
    contact: {
      name: "Damien Goehrig"
      url: "https://github.com/Damione1"
      email: "cookbook@damiengoehrig.ca"
    }
  }
  security_definitions: {
    security: {
      key: "Bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Access token obtained from the login endpoint. Bearer authentication should be used with the format: 'Bearer {access_token}'."
      }
    }
  }
  security: {
    security_requirement: { key: "Bearer" value: {} }
  }
  tags: {
    name: "Authentication"
    description: "Endpoints for authentication"
  }
  tags: {
    name: "Users"
    description: "Endpoints for user management"
  }
  tags: {
    name: "Recipes"
    description: "Endpoints for recipe management"
  }
  tags: {
    name: "Ingredients"
    description: "Endpoints for ingredient management"
  }
  tags: {
    name: "Posts"
    description: "Endpoints for post management"
  }
};

service PortfolioService {
  rpc LoginUser (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/user/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Log in a user"
      description: "Authenticate a user with their email and password and return an access token."
      security: {};
      tags: "Authentication";
    };
  }
  rpc LogoutUser (LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/v1/user/logout"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Log out a user"
      description: "Revoke the access token of a logged-in user."
      tags: "Authentication";
    };
  }
  rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/user/refresh"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh an access token"
      description: "Refresh an expired access token using a refresh token."
      security: {};
      tags: "Authentication";
    };
  }
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/user/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new user"
      description: "Add a new user to the system with the provided information."
      security: {};
      tags: "Users";
    };
  }
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/user/update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a user's information"
      description: "Modify the information of a specific user."
      tags: "Users";
    };
  }
  rpc GetUser (GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/user/get/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user's information"
      description: "Retrieve information for a specific user by their ID."
      security: {};
      tags: "Users";
    };
  }
  rpc ResetPassword (ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/user/reset"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Reset a user's password"
      description: "Send a password reset email to a user's registered email address."
      security: {};
      tags: "Users";
    };
  }
  rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post: "/v1/user/change"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Change a user's password"
      description: "Update the password of a specific user."
      tags: "Users";
    };
  }
  rpc CreatePost (CreatePostRequest) returns (CreatePostResponse) {
    option (google.api.http) = {
      post: "/v1/post/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new post"
      description: "Add a new post to the system with the provided information."
      tags: "Posts";
    };
  }
  rpc UpdatePost (UpdatePostRequest) returns (UpdatePostResponse) {
    option (google.api.http) = {
      put: "/v1/post/update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a post's information"
      description: "Modify the information of a specific post."
      tags: "Posts";
    };
  }
  rpc GetPost (GetPostRequest) returns (GetPostResponse) {
    option (google.api.http) = {
      get: "/v1/post/get/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a post's information"
      description: "Retrieve information for a specific post by its ID."
      security: {};
      tags: "Posts";
    };
  }
  rpc ListPosts (ListPostsRequest) returns (ListPostsResponse) {
    option (google.api.http) = {
      post: "/v1/post/list"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List all posts"
      description: "Retrieve a list of all posts in the system."
      security: {};
      tags: "Posts";
    };
  }
  rpc DeletePost (DeletePostRequest) returns (DeletePostResponse) {
    option (google.api.http) = {
      delete: "/v1/post/delete/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a post"
      description: "Remove a specific post from the system."
      tags: "Posts";
    };
  }
  rpc CreateRecipe (CreateRecipeRequest) returns (CreateRecipeResponse) {
    option (google.api.http) = {
      post: "/v1/recipe/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new recipe"
      description: "Add a new recipe to the system with the provided information."
      tags: "Recipes";
    };
  }
  rpc UpdateRecipe (UpdateRecipeRequest) returns (UpdateRecipeResponse) {
    option (google.api.http) = {
      put: "/v1/recipe/update/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a recipe's information"
      description: "Modify the information of a specific recipe."
      tags: "Recipes";
    };
  }
  rpc GetRecipe (GetRecipeRequest) returns (GetRecipeResponse) {
    option (google.api.http) = {
      get: "/v1/recipe/get/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a recipe's information"
      description: "Retrieve information for a specific recipe by its ID."
      tags: "Recipes";
    };
  }
  rpc ListRecipes (ListRecipesRequest) returns (ListRecipesResponse) {
    option (google.api.http) = {
      post: "/v1/recipe/list"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List all recipes"
      description: "Retrieve a list of all recipes in the system."
      security: {};
      tags: "Recipes";
    };
  }
  rpc DeleteRecipe (DeleteRecipeRequest) returns (DeleteRecipeResponse) {
    option (google.api.http) = {
      delete: "/v1/recipe/delete/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a recipe"
      description: "Remove a specific recipe from the system."
      tags: "Recipes";
    };
  }
  rpc CreateIngredient (CreateIngredientRequest) returns (CreateIngredientResponse) {
    option (google.api.http) = {
      post: "/v1/ingredient/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new ingredient"
      description: "Add a new ingredient to the system with the provided information."
      tags: "Ingredients";
    };
  }
  rpc UpdateIngredient (UpdateIngredientRequest) returns (UpdateIngredientResponse) {
    option (google.api.http) = {
      put: "/v1/ingredient/update/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an ingredient's information"
      description: "Modify the information of a specific ingredient."
      tags: "Ingredients";
    };
  }
  rpc GetIngredient (GetIngredientRequest) returns (GetIngredientResponse) {
    option (google.api.http) = {
      get: "/v1/ingredient/get/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get an ingredient's information"
      description: "Retrieve information for a specific ingredient by its ID."
      security: {};
      tags: "Ingredients";
    };
  }
  rpc ListIngredients (ListIngredientsRequest) returns (ListIngredientsResponse) {
    option (google.api.http) = {
      post: "/v1/ingredient/list"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List all ingredients"
      description: "Retrieve a list of all ingredients in the system."
      security: {};
      tags: "Ingredients";
    };
  }
  rpc DeleteIngredient (DeleteIngredientRequest) returns (DeleteIngredientResponse) {
    option (google.api.http) = {
      delete: "/v1/ingredient/delete/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an ingredient"
      description: "Remove a specific ingredient from the system."
      tags: "Ingredients";
    };
  }
}
