// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecipeIngredient is an object representing the database table.
type RecipeIngredient struct {
	RecipeID     int                `boil:"recipe_id" json:"recipe_id" toml:"recipe_id" yaml:"recipe_id"`
	IngredientID int                `boil:"ingredient_id" json:"ingredient_id" toml:"ingredient_id" yaml:"ingredient_id"`
	Quantity     float64            `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	Unit         IngredientUnitEnum `boil:"unit" json:"unit" toml:"unit" yaml:"unit"`
	CreatedAt    null.Time          `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time          `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *recipeIngredientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recipeIngredientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeIngredientColumns = struct {
	RecipeID     string
	IngredientID string
	Quantity     string
	Unit         string
	CreatedAt    string
	UpdatedAt    string
}{
	RecipeID:     "recipe_id",
	IngredientID: "ingredient_id",
	Quantity:     "quantity",
	Unit:         "unit",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var RecipeIngredientTableColumns = struct {
	RecipeID     string
	IngredientID string
	Quantity     string
	Unit         string
	CreatedAt    string
	UpdatedAt    string
}{
	RecipeID:     "recipe_ingredients.recipe_id",
	IngredientID: "recipe_ingredients.ingredient_id",
	Quantity:     "recipe_ingredients.quantity",
	Unit:         "recipe_ingredients.unit",
	CreatedAt:    "recipe_ingredients.created_at",
	UpdatedAt:    "recipe_ingredients.updated_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperIngredientUnitEnum struct{ field string }

func (w whereHelperIngredientUnitEnum) EQ(x IngredientUnitEnum) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperIngredientUnitEnum) NEQ(x IngredientUnitEnum) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperIngredientUnitEnum) LT(x IngredientUnitEnum) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperIngredientUnitEnum) LTE(x IngredientUnitEnum) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperIngredientUnitEnum) GT(x IngredientUnitEnum) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperIngredientUnitEnum) GTE(x IngredientUnitEnum) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperIngredientUnitEnum) IN(slice []IngredientUnitEnum) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperIngredientUnitEnum) NIN(slice []IngredientUnitEnum) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RecipeIngredientWhere = struct {
	RecipeID     whereHelperint
	IngredientID whereHelperint
	Quantity     whereHelperfloat64
	Unit         whereHelperIngredientUnitEnum
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
}{
	RecipeID:     whereHelperint{field: "\"recipe_ingredients\".\"recipe_id\""},
	IngredientID: whereHelperint{field: "\"recipe_ingredients\".\"ingredient_id\""},
	Quantity:     whereHelperfloat64{field: "\"recipe_ingredients\".\"quantity\""},
	Unit:         whereHelperIngredientUnitEnum{field: "\"recipe_ingredients\".\"unit\""},
	CreatedAt:    whereHelpernull_Time{field: "\"recipe_ingredients\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"recipe_ingredients\".\"updated_at\""},
}

// RecipeIngredientRels is where relationship names are stored.
var RecipeIngredientRels = struct {
	Ingredient string
	Recipe     string
}{
	Ingredient: "Ingredient",
	Recipe:     "Recipe",
}

// recipeIngredientR is where relationships are stored.
type recipeIngredientR struct {
	Ingredient *Ingredient `boil:"Ingredient" json:"Ingredient" toml:"Ingredient" yaml:"Ingredient"`
	Recipe     *Recipe     `boil:"Recipe" json:"Recipe" toml:"Recipe" yaml:"Recipe"`
}

// NewStruct creates a new relationship struct
func (*recipeIngredientR) NewStruct() *recipeIngredientR {
	return &recipeIngredientR{}
}

func (r *recipeIngredientR) GetIngredient() *Ingredient {
	if r == nil {
		return nil
	}
	return r.Ingredient
}

func (r *recipeIngredientR) GetRecipe() *Recipe {
	if r == nil {
		return nil
	}
	return r.Recipe
}

// recipeIngredientL is where Load methods for each relationship are stored.
type recipeIngredientL struct{}

var (
	recipeIngredientAllColumns            = []string{"recipe_id", "ingredient_id", "quantity", "unit", "created_at", "updated_at"}
	recipeIngredientColumnsWithoutDefault = []string{"quantity", "unit"}
	recipeIngredientColumnsWithDefault    = []string{"recipe_id", "ingredient_id", "created_at", "updated_at"}
	recipeIngredientPrimaryKeyColumns     = []string{"recipe_id", "ingredient_id"}
	recipeIngredientGeneratedColumns      = []string{}
)

type (
	// RecipeIngredientSlice is an alias for a slice of pointers to RecipeIngredient.
	// This should almost always be used instead of []RecipeIngredient.
	RecipeIngredientSlice []*RecipeIngredient
	// RecipeIngredientHook is the signature for custom RecipeIngredient hook methods
	RecipeIngredientHook func(context.Context, boil.ContextExecutor, *RecipeIngredient) error

	recipeIngredientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeIngredientType                 = reflect.TypeOf(&RecipeIngredient{})
	recipeIngredientMapping              = queries.MakeStructMapping(recipeIngredientType)
	recipeIngredientPrimaryKeyMapping, _ = queries.BindMapping(recipeIngredientType, recipeIngredientMapping, recipeIngredientPrimaryKeyColumns)
	recipeIngredientInsertCacheMut       sync.RWMutex
	recipeIngredientInsertCache          = make(map[string]insertCache)
	recipeIngredientUpdateCacheMut       sync.RWMutex
	recipeIngredientUpdateCache          = make(map[string]updateCache)
	recipeIngredientUpsertCacheMut       sync.RWMutex
	recipeIngredientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeIngredientAfterSelectHooks []RecipeIngredientHook

var recipeIngredientBeforeInsertHooks []RecipeIngredientHook
var recipeIngredientAfterInsertHooks []RecipeIngredientHook

var recipeIngredientBeforeUpdateHooks []RecipeIngredientHook
var recipeIngredientAfterUpdateHooks []RecipeIngredientHook

var recipeIngredientBeforeDeleteHooks []RecipeIngredientHook
var recipeIngredientAfterDeleteHooks []RecipeIngredientHook

var recipeIngredientBeforeUpsertHooks []RecipeIngredientHook
var recipeIngredientAfterUpsertHooks []RecipeIngredientHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecipeIngredient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecipeIngredient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecipeIngredient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecipeIngredient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecipeIngredient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecipeIngredient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecipeIngredient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecipeIngredient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecipeIngredient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeIngredientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeIngredientHook registers your hook function for all future operations.
func AddRecipeIngredientHook(hookPoint boil.HookPoint, recipeIngredientHook RecipeIngredientHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recipeIngredientAfterSelectHooks = append(recipeIngredientAfterSelectHooks, recipeIngredientHook)
	case boil.BeforeInsertHook:
		recipeIngredientBeforeInsertHooks = append(recipeIngredientBeforeInsertHooks, recipeIngredientHook)
	case boil.AfterInsertHook:
		recipeIngredientAfterInsertHooks = append(recipeIngredientAfterInsertHooks, recipeIngredientHook)
	case boil.BeforeUpdateHook:
		recipeIngredientBeforeUpdateHooks = append(recipeIngredientBeforeUpdateHooks, recipeIngredientHook)
	case boil.AfterUpdateHook:
		recipeIngredientAfterUpdateHooks = append(recipeIngredientAfterUpdateHooks, recipeIngredientHook)
	case boil.BeforeDeleteHook:
		recipeIngredientBeforeDeleteHooks = append(recipeIngredientBeforeDeleteHooks, recipeIngredientHook)
	case boil.AfterDeleteHook:
		recipeIngredientAfterDeleteHooks = append(recipeIngredientAfterDeleteHooks, recipeIngredientHook)
	case boil.BeforeUpsertHook:
		recipeIngredientBeforeUpsertHooks = append(recipeIngredientBeforeUpsertHooks, recipeIngredientHook)
	case boil.AfterUpsertHook:
		recipeIngredientAfterUpsertHooks = append(recipeIngredientAfterUpsertHooks, recipeIngredientHook)
	}
}

// OneG returns a single recipeIngredient record from the query using the global executor.
func (q recipeIngredientQuery) OneG(ctx context.Context) (*RecipeIngredient, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single recipeIngredient record from the query.
func (q recipeIngredientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecipeIngredient, error) {
	o := &RecipeIngredient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipe_ingredients")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RecipeIngredient records from the query using the global executor.
func (q recipeIngredientQuery) AllG(ctx context.Context) (RecipeIngredientSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RecipeIngredient records from the query.
func (q recipeIngredientQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeIngredientSlice, error) {
	var o []*RecipeIngredient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecipeIngredient slice")
	}

	if len(recipeIngredientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RecipeIngredient records in the query using the global executor
func (q recipeIngredientQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RecipeIngredient records in the query.
func (q recipeIngredientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipe_ingredients rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q recipeIngredientQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q recipeIngredientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipe_ingredients exists")
	}

	return count > 0, nil
}

// Ingredient pointed to by the foreign key.
func (o *RecipeIngredient) Ingredient(mods ...qm.QueryMod) ingredientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IngredientID),
	}

	queryMods = append(queryMods, mods...)

	return Ingredients(queryMods...)
}

// Recipe pointed to by the foreign key.
func (o *RecipeIngredient) Recipe(mods ...qm.QueryMod) recipeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RecipeID),
	}

	queryMods = append(queryMods, mods...)

	return Recipes(queryMods...)
}

// LoadIngredient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeIngredientL) LoadIngredient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeIngredient interface{}, mods queries.Applicator) error {
	var slice []*RecipeIngredient
	var object *RecipeIngredient

	if singular {
		var ok bool
		object, ok = maybeRecipeIngredient.(*RecipeIngredient)
		if !ok {
			object = new(RecipeIngredient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecipeIngredient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecipeIngredient))
			}
		}
	} else {
		s, ok := maybeRecipeIngredient.(*[]*RecipeIngredient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecipeIngredient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecipeIngredient))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeIngredientR{}
		}
		args = append(args, object.IngredientID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeIngredientR{}
			}

			for _, a := range args {
				if a == obj.IngredientID {
					continue Outer
				}
			}

			args = append(args, obj.IngredientID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ingredients`),
		qm.WhereIn(`ingredients.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ingredient")
	}

	var resultSlice []*Ingredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ingredient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ingredients")
	}

	if len(ingredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ingredient = foreign
		if foreign.R == nil {
			foreign.R = &ingredientR{}
		}
		foreign.R.RecipeIngredients = append(foreign.R.RecipeIngredients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IngredientID == foreign.ID {
				local.R.Ingredient = foreign
				if foreign.R == nil {
					foreign.R = &ingredientR{}
				}
				foreign.R.RecipeIngredients = append(foreign.R.RecipeIngredients, local)
				break
			}
		}
	}

	return nil
}

// LoadRecipe allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeIngredientL) LoadRecipe(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeIngredient interface{}, mods queries.Applicator) error {
	var slice []*RecipeIngredient
	var object *RecipeIngredient

	if singular {
		var ok bool
		object, ok = maybeRecipeIngredient.(*RecipeIngredient)
		if !ok {
			object = new(RecipeIngredient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecipeIngredient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecipeIngredient))
			}
		}
	} else {
		s, ok := maybeRecipeIngredient.(*[]*RecipeIngredient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecipeIngredient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecipeIngredient))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeIngredientR{}
		}
		args = append(args, object.RecipeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeIngredientR{}
			}

			for _, a := range args {
				if a == obj.RecipeID {
					continue Outer
				}
			}

			args = append(args, obj.RecipeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipes`),
		qm.WhereIn(`recipes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Recipe")
	}

	var resultSlice []*Recipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipes")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Recipe = foreign
		if foreign.R == nil {
			foreign.R = &recipeR{}
		}
		foreign.R.RecipeIngredients = append(foreign.R.RecipeIngredients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RecipeID == foreign.ID {
				local.R.Recipe = foreign
				if foreign.R == nil {
					foreign.R = &recipeR{}
				}
				foreign.R.RecipeIngredients = append(foreign.R.RecipeIngredients, local)
				break
			}
		}
	}

	return nil
}

// SetIngredientG of the recipeIngredient to the related item.
// Sets o.R.Ingredient to related.
// Adds o to related.R.RecipeIngredients.
// Uses the global database handle.
func (o *RecipeIngredient) SetIngredientG(ctx context.Context, insert bool, related *Ingredient) error {
	return o.SetIngredient(ctx, boil.GetContextDB(), insert, related)
}

// SetIngredient of the recipeIngredient to the related item.
// Sets o.R.Ingredient to related.
// Adds o to related.R.RecipeIngredients.
func (o *RecipeIngredient) SetIngredient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ingredient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_ingredients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ingredient_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeIngredientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RecipeID, o.IngredientID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IngredientID = related.ID
	if o.R == nil {
		o.R = &recipeIngredientR{
			Ingredient: related,
		}
	} else {
		o.R.Ingredient = related
	}

	if related.R == nil {
		related.R = &ingredientR{
			RecipeIngredients: RecipeIngredientSlice{o},
		}
	} else {
		related.R.RecipeIngredients = append(related.R.RecipeIngredients, o)
	}

	return nil
}

// SetRecipeG of the recipeIngredient to the related item.
// Sets o.R.Recipe to related.
// Adds o to related.R.RecipeIngredients.
// Uses the global database handle.
func (o *RecipeIngredient) SetRecipeG(ctx context.Context, insert bool, related *Recipe) error {
	return o.SetRecipe(ctx, boil.GetContextDB(), insert, related)
}

// SetRecipe of the recipeIngredient to the related item.
// Sets o.R.Recipe to related.
// Adds o to related.R.RecipeIngredients.
func (o *RecipeIngredient) SetRecipe(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Recipe) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_ingredients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"recipe_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeIngredientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RecipeID, o.IngredientID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RecipeID = related.ID
	if o.R == nil {
		o.R = &recipeIngredientR{
			Recipe: related,
		}
	} else {
		o.R.Recipe = related
	}

	if related.R == nil {
		related.R = &recipeR{
			RecipeIngredients: RecipeIngredientSlice{o},
		}
	} else {
		related.R.RecipeIngredients = append(related.R.RecipeIngredients, o)
	}

	return nil
}

// RecipeIngredients retrieves all the records using an executor.
func RecipeIngredients(mods ...qm.QueryMod) recipeIngredientQuery {
	mods = append(mods, qm.From("\"recipe_ingredients\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recipe_ingredients\".*"})
	}

	return recipeIngredientQuery{q}
}

// FindRecipeIngredientG retrieves a single record by ID.
func FindRecipeIngredientG(ctx context.Context, recipeID int, ingredientID int, selectCols ...string) (*RecipeIngredient, error) {
	return FindRecipeIngredient(ctx, boil.GetContextDB(), recipeID, ingredientID, selectCols...)
}

// FindRecipeIngredient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipeIngredient(ctx context.Context, exec boil.ContextExecutor, recipeID int, ingredientID int, selectCols ...string) (*RecipeIngredient, error) {
	recipeIngredientObj := &RecipeIngredient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipe_ingredients\" where \"recipe_id\"=$1 AND \"ingredient_id\"=$2", sel,
	)

	q := queries.Raw(query, recipeID, ingredientID)

	err := q.Bind(ctx, exec, recipeIngredientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipe_ingredients")
	}

	if err = recipeIngredientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recipeIngredientObj, err
	}

	return recipeIngredientObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RecipeIngredient) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecipeIngredient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_ingredients provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeIngredientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeIngredientInsertCacheMut.RLock()
	cache, cached := recipeIngredientInsertCache[key]
	recipeIngredientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeIngredientAllColumns,
			recipeIngredientColumnsWithDefault,
			recipeIngredientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeIngredientType, recipeIngredientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeIngredientType, recipeIngredientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipe_ingredients\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipe_ingredients\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipe_ingredients")
	}

	if !cached {
		recipeIngredientInsertCacheMut.Lock()
		recipeIngredientInsertCache[key] = cache
		recipeIngredientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RecipeIngredient record using the global executor.
// See Update for more documentation.
func (o *RecipeIngredient) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RecipeIngredient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecipeIngredient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeIngredientUpdateCacheMut.RLock()
	cache, cached := recipeIngredientUpdateCache[key]
	recipeIngredientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeIngredientAllColumns,
			recipeIngredientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipe_ingredients, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipe_ingredients\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipeIngredientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeIngredientType, recipeIngredientMapping, append(wl, recipeIngredientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipe_ingredients row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipe_ingredients")
	}

	if !cached {
		recipeIngredientUpdateCacheMut.Lock()
		recipeIngredientUpdateCache[key] = cache
		recipeIngredientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q recipeIngredientQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeIngredientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipe_ingredients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipe_ingredients")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RecipeIngredientSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeIngredientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipe_ingredients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipeIngredientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipeIngredient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipeIngredient")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RecipeIngredient) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecipeIngredient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_ingredients provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeIngredientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeIngredientUpsertCacheMut.RLock()
	cache, cached := recipeIngredientUpsertCache[key]
	recipeIngredientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeIngredientAllColumns,
			recipeIngredientColumnsWithDefault,
			recipeIngredientColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recipeIngredientAllColumns,
			recipeIngredientPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipe_ingredients, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipeIngredientPrimaryKeyColumns))
			copy(conflict, recipeIngredientPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipe_ingredients\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeIngredientType, recipeIngredientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeIngredientType, recipeIngredientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipe_ingredients")
	}

	if !cached {
		recipeIngredientUpsertCacheMut.Lock()
		recipeIngredientUpsertCache[key] = cache
		recipeIngredientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RecipeIngredient record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RecipeIngredient) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RecipeIngredient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecipeIngredient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecipeIngredient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipeIngredientPrimaryKeyMapping)
	sql := "DELETE FROM \"recipe_ingredients\" WHERE \"recipe_id\"=$1 AND \"ingredient_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipe_ingredients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipe_ingredients")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q recipeIngredientQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q recipeIngredientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeIngredientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe_ingredients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_ingredients")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RecipeIngredientSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeIngredientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeIngredientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipe_ingredients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeIngredientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipeIngredient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_ingredients")
	}

	if len(recipeIngredientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RecipeIngredient) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no RecipeIngredient provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecipeIngredient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipeIngredient(ctx, exec, o.RecipeID, o.IngredientID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeIngredientSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RecipeIngredientSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeIngredientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeIngredientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipe_ingredients\".* FROM \"recipe_ingredients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeIngredientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeIngredientSlice")
	}

	*o = slice

	return nil
}

// RecipeIngredientExistsG checks if the RecipeIngredient row exists.
func RecipeIngredientExistsG(ctx context.Context, recipeID int, ingredientID int) (bool, error) {
	return RecipeIngredientExists(ctx, boil.GetContextDB(), recipeID, ingredientID)
}

// RecipeIngredientExists checks if the RecipeIngredient row exists.
func RecipeIngredientExists(ctx context.Context, exec boil.ContextExecutor, recipeID int, ingredientID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipe_ingredients\" where \"recipe_id\"=$1 AND \"ingredient_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, recipeID, ingredientID)
	}
	row := exec.QueryRowContext(ctx, sql, recipeID, ingredientID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipe_ingredients exists")
	}

	return exists, nil
}

// Exists checks if the RecipeIngredient row exists.
func (o *RecipeIngredient) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecipeIngredientExists(ctx, exec, o.RecipeID, o.IngredientID)
}
