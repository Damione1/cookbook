// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CurriculumVitaeSkill is an object representing the database table.
type CurriculumVitaeSkill struct {
	ID                int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CurriculumVitaeID int       `boil:"curriculum_vitae_id" json:"curriculum_vitae_id" toml:"curriculum_vitae_id" yaml:"curriculum_vitae_id"`
	SkillID           int       `boil:"skill_id" json:"skill_id" toml:"skill_id" yaml:"skill_id"`
	CreatedAt         null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *curriculumVitaeSkillR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L curriculumVitaeSkillL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurriculumVitaeSkillColumns = struct {
	ID                string
	CurriculumVitaeID string
	SkillID           string
	CreatedAt         string
}{
	ID:                "id",
	CurriculumVitaeID: "curriculum_vitae_id",
	SkillID:           "skill_id",
	CreatedAt:         "created_at",
}

var CurriculumVitaeSkillTableColumns = struct {
	ID                string
	CurriculumVitaeID string
	SkillID           string
	CreatedAt         string
}{
	ID:                "curriculum_vitae_skills.id",
	CurriculumVitaeID: "curriculum_vitae_skills.curriculum_vitae_id",
	SkillID:           "curriculum_vitae_skills.skill_id",
	CreatedAt:         "curriculum_vitae_skills.created_at",
}

// Generated where

var CurriculumVitaeSkillWhere = struct {
	ID                whereHelperint
	CurriculumVitaeID whereHelperint
	SkillID           whereHelperint
	CreatedAt         whereHelpernull_Time
}{
	ID:                whereHelperint{field: "\"curriculum_vitae_skills\".\"id\""},
	CurriculumVitaeID: whereHelperint{field: "\"curriculum_vitae_skills\".\"curriculum_vitae_id\""},
	SkillID:           whereHelperint{field: "\"curriculum_vitae_skills\".\"skill_id\""},
	CreatedAt:         whereHelpernull_Time{field: "\"curriculum_vitae_skills\".\"created_at\""},
}

// CurriculumVitaeSkillRels is where relationship names are stored.
var CurriculumVitaeSkillRels = struct {
	CurriculumVitae string
	Skill           string
}{
	CurriculumVitae: "CurriculumVitae",
	Skill:           "Skill",
}

// curriculumVitaeSkillR is where relationships are stored.
type curriculumVitaeSkillR struct {
	CurriculumVitae *CurriculumVitae `boil:"CurriculumVitae" json:"CurriculumVitae" toml:"CurriculumVitae" yaml:"CurriculumVitae"`
	Skill           *Skill           `boil:"Skill" json:"Skill" toml:"Skill" yaml:"Skill"`
}

// NewStruct creates a new relationship struct
func (*curriculumVitaeSkillR) NewStruct() *curriculumVitaeSkillR {
	return &curriculumVitaeSkillR{}
}

func (r *curriculumVitaeSkillR) GetCurriculumVitae() *CurriculumVitae {
	if r == nil {
		return nil
	}
	return r.CurriculumVitae
}

func (r *curriculumVitaeSkillR) GetSkill() *Skill {
	if r == nil {
		return nil
	}
	return r.Skill
}

// curriculumVitaeSkillL is where Load methods for each relationship are stored.
type curriculumVitaeSkillL struct{}

var (
	curriculumVitaeSkillAllColumns            = []string{"id", "curriculum_vitae_id", "skill_id", "created_at"}
	curriculumVitaeSkillColumnsWithoutDefault = []string{"curriculum_vitae_id", "skill_id"}
	curriculumVitaeSkillColumnsWithDefault    = []string{"id", "created_at"}
	curriculumVitaeSkillPrimaryKeyColumns     = []string{"id"}
	curriculumVitaeSkillGeneratedColumns      = []string{}
)

type (
	// CurriculumVitaeSkillSlice is an alias for a slice of pointers to CurriculumVitaeSkill.
	// This should almost always be used instead of []CurriculumVitaeSkill.
	CurriculumVitaeSkillSlice []*CurriculumVitaeSkill
	// CurriculumVitaeSkillHook is the signature for custom CurriculumVitaeSkill hook methods
	CurriculumVitaeSkillHook func(context.Context, boil.ContextExecutor, *CurriculumVitaeSkill) error

	curriculumVitaeSkillQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	curriculumVitaeSkillType                 = reflect.TypeOf(&CurriculumVitaeSkill{})
	curriculumVitaeSkillMapping              = queries.MakeStructMapping(curriculumVitaeSkillType)
	curriculumVitaeSkillPrimaryKeyMapping, _ = queries.BindMapping(curriculumVitaeSkillType, curriculumVitaeSkillMapping, curriculumVitaeSkillPrimaryKeyColumns)
	curriculumVitaeSkillInsertCacheMut       sync.RWMutex
	curriculumVitaeSkillInsertCache          = make(map[string]insertCache)
	curriculumVitaeSkillUpdateCacheMut       sync.RWMutex
	curriculumVitaeSkillUpdateCache          = make(map[string]updateCache)
	curriculumVitaeSkillUpsertCacheMut       sync.RWMutex
	curriculumVitaeSkillUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var curriculumVitaeSkillAfterSelectHooks []CurriculumVitaeSkillHook

var curriculumVitaeSkillBeforeInsertHooks []CurriculumVitaeSkillHook
var curriculumVitaeSkillAfterInsertHooks []CurriculumVitaeSkillHook

var curriculumVitaeSkillBeforeUpdateHooks []CurriculumVitaeSkillHook
var curriculumVitaeSkillAfterUpdateHooks []CurriculumVitaeSkillHook

var curriculumVitaeSkillBeforeDeleteHooks []CurriculumVitaeSkillHook
var curriculumVitaeSkillAfterDeleteHooks []CurriculumVitaeSkillHook

var curriculumVitaeSkillBeforeUpsertHooks []CurriculumVitaeSkillHook
var curriculumVitaeSkillAfterUpsertHooks []CurriculumVitaeSkillHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurriculumVitaeSkill) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurriculumVitaeSkill) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurriculumVitaeSkill) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurriculumVitaeSkill) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurriculumVitaeSkill) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurriculumVitaeSkill) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurriculumVitaeSkill) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurriculumVitaeSkill) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurriculumVitaeSkill) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeSkillAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurriculumVitaeSkillHook registers your hook function for all future operations.
func AddCurriculumVitaeSkillHook(hookPoint boil.HookPoint, curriculumVitaeSkillHook CurriculumVitaeSkillHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		curriculumVitaeSkillAfterSelectHooks = append(curriculumVitaeSkillAfterSelectHooks, curriculumVitaeSkillHook)
	case boil.BeforeInsertHook:
		curriculumVitaeSkillBeforeInsertHooks = append(curriculumVitaeSkillBeforeInsertHooks, curriculumVitaeSkillHook)
	case boil.AfterInsertHook:
		curriculumVitaeSkillAfterInsertHooks = append(curriculumVitaeSkillAfterInsertHooks, curriculumVitaeSkillHook)
	case boil.BeforeUpdateHook:
		curriculumVitaeSkillBeforeUpdateHooks = append(curriculumVitaeSkillBeforeUpdateHooks, curriculumVitaeSkillHook)
	case boil.AfterUpdateHook:
		curriculumVitaeSkillAfterUpdateHooks = append(curriculumVitaeSkillAfterUpdateHooks, curriculumVitaeSkillHook)
	case boil.BeforeDeleteHook:
		curriculumVitaeSkillBeforeDeleteHooks = append(curriculumVitaeSkillBeforeDeleteHooks, curriculumVitaeSkillHook)
	case boil.AfterDeleteHook:
		curriculumVitaeSkillAfterDeleteHooks = append(curriculumVitaeSkillAfterDeleteHooks, curriculumVitaeSkillHook)
	case boil.BeforeUpsertHook:
		curriculumVitaeSkillBeforeUpsertHooks = append(curriculumVitaeSkillBeforeUpsertHooks, curriculumVitaeSkillHook)
	case boil.AfterUpsertHook:
		curriculumVitaeSkillAfterUpsertHooks = append(curriculumVitaeSkillAfterUpsertHooks, curriculumVitaeSkillHook)
	}
}

// One returns a single curriculumVitaeSkill record from the query.
func (q curriculumVitaeSkillQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurriculumVitaeSkill, error) {
	o := &CurriculumVitaeSkill{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for curriculum_vitae_skills")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurriculumVitaeSkill records from the query.
func (q curriculumVitaeSkillQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurriculumVitaeSkillSlice, error) {
	var o []*CurriculumVitaeSkill

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurriculumVitaeSkill slice")
	}

	if len(curriculumVitaeSkillAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurriculumVitaeSkill records in the query.
func (q curriculumVitaeSkillQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count curriculum_vitae_skills rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q curriculumVitaeSkillQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if curriculum_vitae_skills exists")
	}

	return count > 0, nil
}

// CurriculumVitae pointed to by the foreign key.
func (o *CurriculumVitaeSkill) CurriculumVitae(mods ...qm.QueryMod) curriculumVitaeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CurriculumVitaeID),
	}

	queryMods = append(queryMods, mods...)

	return CurriculumVitaes(queryMods...)
}

// Skill pointed to by the foreign key.
func (o *CurriculumVitaeSkill) Skill(mods ...qm.QueryMod) skillQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkillID),
	}

	queryMods = append(queryMods, mods...)

	return Skills(queryMods...)
}

// LoadCurriculumVitae allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (curriculumVitaeSkillL) LoadCurriculumVitae(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurriculumVitaeSkill interface{}, mods queries.Applicator) error {
	var slice []*CurriculumVitaeSkill
	var object *CurriculumVitaeSkill

	if singular {
		var ok bool
		object, ok = maybeCurriculumVitaeSkill.(*CurriculumVitaeSkill)
		if !ok {
			object = new(CurriculumVitaeSkill)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurriculumVitaeSkill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurriculumVitaeSkill))
			}
		}
	} else {
		s, ok := maybeCurriculumVitaeSkill.(*[]*CurriculumVitaeSkill)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurriculumVitaeSkill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurriculumVitaeSkill))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &curriculumVitaeSkillR{}
		}
		args = append(args, object.CurriculumVitaeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &curriculumVitaeSkillR{}
			}

			for _, a := range args {
				if a == obj.CurriculumVitaeID {
					continue Outer
				}
			}

			args = append(args, obj.CurriculumVitaeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`curriculum_vitae`),
		qm.WhereIn(`curriculum_vitae.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CurriculumVitae")
	}

	var resultSlice []*CurriculumVitae
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CurriculumVitae")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for curriculum_vitae")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for curriculum_vitae")
	}

	if len(curriculumVitaeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurriculumVitae = foreign
		if foreign.R == nil {
			foreign.R = &curriculumVitaeR{}
		}
		foreign.R.CurriculumVitaeSkills = append(foreign.R.CurriculumVitaeSkills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurriculumVitaeID == foreign.ID {
				local.R.CurriculumVitae = foreign
				if foreign.R == nil {
					foreign.R = &curriculumVitaeR{}
				}
				foreign.R.CurriculumVitaeSkills = append(foreign.R.CurriculumVitaeSkills, local)
				break
			}
		}
	}

	return nil
}

// LoadSkill allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (curriculumVitaeSkillL) LoadSkill(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurriculumVitaeSkill interface{}, mods queries.Applicator) error {
	var slice []*CurriculumVitaeSkill
	var object *CurriculumVitaeSkill

	if singular {
		var ok bool
		object, ok = maybeCurriculumVitaeSkill.(*CurriculumVitaeSkill)
		if !ok {
			object = new(CurriculumVitaeSkill)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurriculumVitaeSkill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurriculumVitaeSkill))
			}
		}
	} else {
		s, ok := maybeCurriculumVitaeSkill.(*[]*CurriculumVitaeSkill)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurriculumVitaeSkill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurriculumVitaeSkill))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &curriculumVitaeSkillR{}
		}
		args = append(args, object.SkillID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &curriculumVitaeSkillR{}
			}

			for _, a := range args {
				if a == obj.SkillID {
					continue Outer
				}
			}

			args = append(args, obj.SkillID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`skills`),
		qm.WhereIn(`skills.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Skill")
	}

	var resultSlice []*Skill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Skill")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for skills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for skills")
	}

	if len(skillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Skill = foreign
		if foreign.R == nil {
			foreign.R = &skillR{}
		}
		foreign.R.CurriculumVitaeSkills = append(foreign.R.CurriculumVitaeSkills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SkillID == foreign.ID {
				local.R.Skill = foreign
				if foreign.R == nil {
					foreign.R = &skillR{}
				}
				foreign.R.CurriculumVitaeSkills = append(foreign.R.CurriculumVitaeSkills, local)
				break
			}
		}
	}

	return nil
}

// SetCurriculumVitae of the curriculumVitaeSkill to the related item.
// Sets o.R.CurriculumVitae to related.
// Adds o to related.R.CurriculumVitaeSkills.
func (o *CurriculumVitaeSkill) SetCurriculumVitae(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CurriculumVitae) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"curriculum_vitae_skills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"curriculum_vitae_id"}),
		strmangle.WhereClause("\"", "\"", 2, curriculumVitaeSkillPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurriculumVitaeID = related.ID
	if o.R == nil {
		o.R = &curriculumVitaeSkillR{
			CurriculumVitae: related,
		}
	} else {
		o.R.CurriculumVitae = related
	}

	if related.R == nil {
		related.R = &curriculumVitaeR{
			CurriculumVitaeSkills: CurriculumVitaeSkillSlice{o},
		}
	} else {
		related.R.CurriculumVitaeSkills = append(related.R.CurriculumVitaeSkills, o)
	}

	return nil
}

// SetSkill of the curriculumVitaeSkill to the related item.
// Sets o.R.Skill to related.
// Adds o to related.R.CurriculumVitaeSkills.
func (o *CurriculumVitaeSkill) SetSkill(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Skill) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"curriculum_vitae_skills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"skill_id"}),
		strmangle.WhereClause("\"", "\"", 2, curriculumVitaeSkillPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SkillID = related.ID
	if o.R == nil {
		o.R = &curriculumVitaeSkillR{
			Skill: related,
		}
	} else {
		o.R.Skill = related
	}

	if related.R == nil {
		related.R = &skillR{
			CurriculumVitaeSkills: CurriculumVitaeSkillSlice{o},
		}
	} else {
		related.R.CurriculumVitaeSkills = append(related.R.CurriculumVitaeSkills, o)
	}

	return nil
}

// CurriculumVitaeSkills retrieves all the records using an executor.
func CurriculumVitaeSkills(mods ...qm.QueryMod) curriculumVitaeSkillQuery {
	mods = append(mods, qm.From("\"curriculum_vitae_skills\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"curriculum_vitae_skills\".*"})
	}

	return curriculumVitaeSkillQuery{q}
}

// FindCurriculumVitaeSkill retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurriculumVitaeSkill(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CurriculumVitaeSkill, error) {
	curriculumVitaeSkillObj := &CurriculumVitaeSkill{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"curriculum_vitae_skills\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, curriculumVitaeSkillObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from curriculum_vitae_skills")
	}

	if err = curriculumVitaeSkillObj.doAfterSelectHooks(ctx, exec); err != nil {
		return curriculumVitaeSkillObj, err
	}

	return curriculumVitaeSkillObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurriculumVitaeSkill) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no curriculum_vitae_skills provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(curriculumVitaeSkillColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	curriculumVitaeSkillInsertCacheMut.RLock()
	cache, cached := curriculumVitaeSkillInsertCache[key]
	curriculumVitaeSkillInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			curriculumVitaeSkillAllColumns,
			curriculumVitaeSkillColumnsWithDefault,
			curriculumVitaeSkillColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(curriculumVitaeSkillType, curriculumVitaeSkillMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(curriculumVitaeSkillType, curriculumVitaeSkillMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"curriculum_vitae_skills\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"curriculum_vitae_skills\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into curriculum_vitae_skills")
	}

	if !cached {
		curriculumVitaeSkillInsertCacheMut.Lock()
		curriculumVitaeSkillInsertCache[key] = cache
		curriculumVitaeSkillInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CurriculumVitaeSkill.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurriculumVitaeSkill) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	curriculumVitaeSkillUpdateCacheMut.RLock()
	cache, cached := curriculumVitaeSkillUpdateCache[key]
	curriculumVitaeSkillUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			curriculumVitaeSkillAllColumns,
			curriculumVitaeSkillPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update curriculum_vitae_skills, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"curriculum_vitae_skills\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, curriculumVitaeSkillPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(curriculumVitaeSkillType, curriculumVitaeSkillMapping, append(wl, curriculumVitaeSkillPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update curriculum_vitae_skills row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for curriculum_vitae_skills")
	}

	if !cached {
		curriculumVitaeSkillUpdateCacheMut.Lock()
		curriculumVitaeSkillUpdateCache[key] = cache
		curriculumVitaeSkillUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q curriculumVitaeSkillQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for curriculum_vitae_skills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for curriculum_vitae_skills")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurriculumVitaeSkillSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), curriculumVitaeSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"curriculum_vitae_skills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, curriculumVitaeSkillPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in curriculumVitaeSkill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all curriculumVitaeSkill")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurriculumVitaeSkill) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no curriculum_vitae_skills provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(curriculumVitaeSkillColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	curriculumVitaeSkillUpsertCacheMut.RLock()
	cache, cached := curriculumVitaeSkillUpsertCache[key]
	curriculumVitaeSkillUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			curriculumVitaeSkillAllColumns,
			curriculumVitaeSkillColumnsWithDefault,
			curriculumVitaeSkillColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			curriculumVitaeSkillAllColumns,
			curriculumVitaeSkillPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert curriculum_vitae_skills, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(curriculumVitaeSkillPrimaryKeyColumns))
			copy(conflict, curriculumVitaeSkillPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"curriculum_vitae_skills\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(curriculumVitaeSkillType, curriculumVitaeSkillMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(curriculumVitaeSkillType, curriculumVitaeSkillMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert curriculum_vitae_skills")
	}

	if !cached {
		curriculumVitaeSkillUpsertCacheMut.Lock()
		curriculumVitaeSkillUpsertCache[key] = cache
		curriculumVitaeSkillUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CurriculumVitaeSkill record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurriculumVitaeSkill) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurriculumVitaeSkill provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), curriculumVitaeSkillPrimaryKeyMapping)
	sql := "DELETE FROM \"curriculum_vitae_skills\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from curriculum_vitae_skills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for curriculum_vitae_skills")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q curriculumVitaeSkillQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no curriculumVitaeSkillQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from curriculum_vitae_skills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for curriculum_vitae_skills")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurriculumVitaeSkillSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(curriculumVitaeSkillBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), curriculumVitaeSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"curriculum_vitae_skills\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, curriculumVitaeSkillPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from curriculumVitaeSkill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for curriculum_vitae_skills")
	}

	if len(curriculumVitaeSkillAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurriculumVitaeSkill) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurriculumVitaeSkill(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurriculumVitaeSkillSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurriculumVitaeSkillSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), curriculumVitaeSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"curriculum_vitae_skills\".* FROM \"curriculum_vitae_skills\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, curriculumVitaeSkillPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurriculumVitaeSkillSlice")
	}

	*o = slice

	return nil
}

// CurriculumVitaeSkillExists checks if the CurriculumVitaeSkill row exists.
func CurriculumVitaeSkillExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"curriculum_vitae_skills\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if curriculum_vitae_skills exists")
	}

	return exists, nil
}

// Exists checks if the CurriculumVitaeSkill row exists.
func (o *CurriculumVitaeSkill) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CurriculumVitaeSkillExists(ctx, exec, o.ID)
}
