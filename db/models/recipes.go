// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Recipe is an object representing the database table.
type Recipe struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug        string      `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Directions  null.String `boil:"directions" json:"directions,omitempty" toml:"directions" yaml:"directions,omitempty"`
	AuthorID    string      `boil:"author_id" json:"author_id" toml:"author_id" yaml:"author_id"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *recipeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recipeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeColumns = struct {
	ID          string
	Title       string
	Slug        string
	Description string
	Directions  string
	AuthorID    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Title:       "title",
	Slug:        "slug",
	Description: "description",
	Directions:  "directions",
	AuthorID:    "author_id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var RecipeTableColumns = struct {
	ID          string
	Title       string
	Slug        string
	Description string
	Directions  string
	AuthorID    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "recipes.id",
	Title:       "recipes.title",
	Slug:        "recipes.slug",
	Description: "recipes.description",
	Directions:  "recipes.directions",
	AuthorID:    "recipes.author_id",
	CreatedAt:   "recipes.created_at",
	UpdatedAt:   "recipes.updated_at",
	DeletedAt:   "recipes.deleted_at",
}

// Generated where

var RecipeWhere = struct {
	ID          whereHelperint
	Title       whereHelperstring
	Slug        whereHelperstring
	Description whereHelpernull_String
	Directions  whereHelpernull_String
	AuthorID    whereHelperstring
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"recipes\".\"id\""},
	Title:       whereHelperstring{field: "\"recipes\".\"title\""},
	Slug:        whereHelperstring{field: "\"recipes\".\"slug\""},
	Description: whereHelpernull_String{field: "\"recipes\".\"description\""},
	Directions:  whereHelpernull_String{field: "\"recipes\".\"directions\""},
	AuthorID:    whereHelperstring{field: "\"recipes\".\"author_id\""},
	CreatedAt:   whereHelpernull_Time{field: "\"recipes\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"recipes\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"recipes\".\"deleted_at\""},
}

// RecipeRels is where relationship names are stored.
var RecipeRels = struct {
	Author            string
	RecipeIngredients string
	Media             string
}{
	Author:            "Author",
	RecipeIngredients: "RecipeIngredients",
	Media:             "Media",
}

// recipeR is where relationships are stored.
type recipeR struct {
	Author            *User                 `boil:"Author" json:"Author" toml:"Author" yaml:"Author"`
	RecipeIngredients RecipeIngredientSlice `boil:"RecipeIngredients" json:"RecipeIngredients" toml:"RecipeIngredients" yaml:"RecipeIngredients"`
	Media             MediumSlice           `boil:"Media" json:"Media" toml:"Media" yaml:"Media"`
}

// NewStruct creates a new relationship struct
func (*recipeR) NewStruct() *recipeR {
	return &recipeR{}
}

func (r *recipeR) GetAuthor() *User {
	if r == nil {
		return nil
	}
	return r.Author
}

func (r *recipeR) GetRecipeIngredients() RecipeIngredientSlice {
	if r == nil {
		return nil
	}
	return r.RecipeIngredients
}

func (r *recipeR) GetMedia() MediumSlice {
	if r == nil {
		return nil
	}
	return r.Media
}

// recipeL is where Load methods for each relationship are stored.
type recipeL struct{}

var (
	recipeAllColumns            = []string{"id", "title", "slug", "description", "directions", "author_id", "created_at", "updated_at", "deleted_at"}
	recipeColumnsWithoutDefault = []string{"title", "slug", "author_id"}
	recipeColumnsWithDefault    = []string{"id", "description", "directions", "created_at", "updated_at", "deleted_at"}
	recipePrimaryKeyColumns     = []string{"id"}
	recipeGeneratedColumns      = []string{}
)

type (
	// RecipeSlice is an alias for a slice of pointers to Recipe.
	// This should almost always be used instead of []Recipe.
	RecipeSlice []*Recipe
	// RecipeHook is the signature for custom Recipe hook methods
	RecipeHook func(context.Context, boil.ContextExecutor, *Recipe) error

	recipeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeType                 = reflect.TypeOf(&Recipe{})
	recipeMapping              = queries.MakeStructMapping(recipeType)
	recipePrimaryKeyMapping, _ = queries.BindMapping(recipeType, recipeMapping, recipePrimaryKeyColumns)
	recipeInsertCacheMut       sync.RWMutex
	recipeInsertCache          = make(map[string]insertCache)
	recipeUpdateCacheMut       sync.RWMutex
	recipeUpdateCache          = make(map[string]updateCache)
	recipeUpsertCacheMut       sync.RWMutex
	recipeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeAfterSelectHooks []RecipeHook

var recipeBeforeInsertHooks []RecipeHook
var recipeAfterInsertHooks []RecipeHook

var recipeBeforeUpdateHooks []RecipeHook
var recipeAfterUpdateHooks []RecipeHook

var recipeBeforeDeleteHooks []RecipeHook
var recipeAfterDeleteHooks []RecipeHook

var recipeBeforeUpsertHooks []RecipeHook
var recipeAfterUpsertHooks []RecipeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recipe) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recipe) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recipe) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recipe) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recipe) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recipe) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recipe) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recipe) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recipe) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeHook registers your hook function for all future operations.
func AddRecipeHook(hookPoint boil.HookPoint, recipeHook RecipeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recipeAfterSelectHooks = append(recipeAfterSelectHooks, recipeHook)
	case boil.BeforeInsertHook:
		recipeBeforeInsertHooks = append(recipeBeforeInsertHooks, recipeHook)
	case boil.AfterInsertHook:
		recipeAfterInsertHooks = append(recipeAfterInsertHooks, recipeHook)
	case boil.BeforeUpdateHook:
		recipeBeforeUpdateHooks = append(recipeBeforeUpdateHooks, recipeHook)
	case boil.AfterUpdateHook:
		recipeAfterUpdateHooks = append(recipeAfterUpdateHooks, recipeHook)
	case boil.BeforeDeleteHook:
		recipeBeforeDeleteHooks = append(recipeBeforeDeleteHooks, recipeHook)
	case boil.AfterDeleteHook:
		recipeAfterDeleteHooks = append(recipeAfterDeleteHooks, recipeHook)
	case boil.BeforeUpsertHook:
		recipeBeforeUpsertHooks = append(recipeBeforeUpsertHooks, recipeHook)
	case boil.AfterUpsertHook:
		recipeAfterUpsertHooks = append(recipeAfterUpsertHooks, recipeHook)
	}
}

// OneG returns a single recipe record from the query using the global executor.
func (q recipeQuery) OneG(ctx context.Context) (*Recipe, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single recipe record from the query.
func (q recipeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Recipe, error) {
	o := &Recipe{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Recipe records from the query using the global executor.
func (q recipeQuery) AllG(ctx context.Context) (RecipeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Recipe records from the query.
func (q recipeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeSlice, error) {
	var o []*Recipe

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Recipe slice")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Recipe records in the query using the global executor
func (q recipeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Recipe records in the query.
func (q recipeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q recipeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q recipeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipes exists")
	}

	return count > 0, nil
}

// Author pointed to by the foreign key.
func (o *Recipe) Author(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// RecipeIngredients retrieves all the recipe_ingredient's RecipeIngredients with an executor.
func (o *Recipe) RecipeIngredients(mods ...qm.QueryMod) recipeIngredientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_ingredients\".\"recipe_id\"=?", o.ID),
	)

	return RecipeIngredients(queryMods...)
}

// Media retrieves all the medium's Media with an executor.
func (o *Recipe) Media(mods ...qm.QueryMod) mediumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"recipe_media\" on \"media\".\"id\" = \"recipe_media\".\"media_id\""),
		qm.Where("\"recipe_media\".\"recipe_id\"=?", o.ID),
	)

	return Media(queryMods...)
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		var ok bool
		object, ok = maybeRecipe.(*Recipe)
		if !ok {
			object = new(Recipe)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecipe))
			}
		}
	} else {
		s, ok := maybeRecipe.(*[]*Recipe)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecipe))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.AuthorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.AuthorID {
					continue Outer
				}
			}

			args = append(args, obj.AuthorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AuthorRecipes = append(foreign.R.AuthorRecipes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorID == foreign.ID {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AuthorRecipes = append(foreign.R.AuthorRecipes, local)
				break
			}
		}
	}

	return nil
}

// LoadRecipeIngredients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadRecipeIngredients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		var ok bool
		object, ok = maybeRecipe.(*Recipe)
		if !ok {
			object = new(Recipe)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecipe))
			}
		}
	} else {
		s, ok := maybeRecipe.(*[]*Recipe)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecipe))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_ingredients`),
		qm.WhereIn(`recipe_ingredients.recipe_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_ingredients")
	}

	var resultSlice []*RecipeIngredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_ingredients")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_ingredients")
	}

	if len(recipeIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecipeIngredients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recipeIngredientR{}
			}
			foreign.R.Recipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RecipeID {
				local.R.RecipeIngredients = append(local.R.RecipeIngredients, foreign)
				if foreign.R == nil {
					foreign.R = &recipeIngredientR{}
				}
				foreign.R.Recipe = local
				break
			}
		}
	}

	return nil
}

// LoadMedia allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadMedia(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		var ok bool
		object, ok = maybeRecipe.(*Recipe)
		if !ok {
			object = new(Recipe)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecipe))
			}
		}
	} else {
		s, ok := maybeRecipe.(*[]*Recipe)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecipe))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"media\".\"id\", \"media\".\"original_filename\", \"media\".\"original_url\", \"media\".\"thumbnail_url\", \"media\".\"medium_url\", \"media\".\"wide_url\", \"media\".\"created_at\", \"a\".\"recipe_id\""),
		qm.From("\"media\""),
		qm.InnerJoin("\"recipe_media\" as \"a\" on \"media\".\"id\" = \"a\".\"media_id\""),
		qm.WhereIn("\"a\".\"recipe_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load media")
	}

	var resultSlice []*Medium

	var localJoinCols []int
	for results.Next() {
		one := new(Medium)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.OriginalFilename, &one.OriginalURL, &one.ThumbnailURL, &one.MediumURL, &one.WideURL, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for media")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice media")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media")
	}

	if len(mediumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Media = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mediumR{}
			}
			foreign.R.Recipes = append(foreign.R.Recipes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Media = append(local.R.Media, foreign)
				if foreign.R == nil {
					foreign.R = &mediumR{}
				}
				foreign.R.Recipes = append(foreign.R.Recipes, local)
				break
			}
		}
	}

	return nil
}

// SetAuthorG of the recipe to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorRecipes.
// Uses the global database handle.
func (o *Recipe) SetAuthorG(ctx context.Context, insert bool, related *User) error {
	return o.SetAuthor(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthor of the recipe to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorRecipes.
func (o *Recipe) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorID = related.ID
	if o.R == nil {
		o.R = &recipeR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &userR{
			AuthorRecipes: RecipeSlice{o},
		}
	} else {
		related.R.AuthorRecipes = append(related.R.AuthorRecipes, o)
	}

	return nil
}

// AddRecipeIngredientsG adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.RecipeIngredients.
// Sets related.R.Recipe appropriately.
// Uses the global database handle.
func (o *Recipe) AddRecipeIngredientsG(ctx context.Context, insert bool, related ...*RecipeIngredient) error {
	return o.AddRecipeIngredients(ctx, boil.GetContextDB(), insert, related...)
}

// AddRecipeIngredients adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.RecipeIngredients.
// Sets related.R.Recipe appropriately.
func (o *Recipe) AddRecipeIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeIngredient) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecipeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_ingredients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"recipe_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeIngredientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.RecipeID, rel.IngredientID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecipeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			RecipeIngredients: related,
		}
	} else {
		o.R.RecipeIngredients = append(o.R.RecipeIngredients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeIngredientR{
				Recipe: o,
			}
		} else {
			rel.R.Recipe = o
		}
	}
	return nil
}

// AddMediaG adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.Media.
// Sets related.R.Recipes appropriately.
// Uses the global database handle.
func (o *Recipe) AddMediaG(ctx context.Context, insert bool, related ...*Medium) error {
	return o.AddMedia(ctx, boil.GetContextDB(), insert, related...)
}

// AddMedia adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.Media.
// Sets related.R.Recipes appropriately.
func (o *Recipe) AddMedia(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Medium) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"recipe_media\" (\"recipe_id\", \"media_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &recipeR{
			Media: related,
		}
	} else {
		o.R.Media = append(o.R.Media, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mediumR{
				Recipes: RecipeSlice{o},
			}
		} else {
			rel.R.Recipes = append(rel.R.Recipes, o)
		}
	}
	return nil
}

// SetMediaG removes all previously related items of the
// recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Recipes's Media accordingly.
// Replaces o.R.Media with related.
// Sets related.R.Recipes's Media accordingly.
// Uses the global database handle.
func (o *Recipe) SetMediaG(ctx context.Context, insert bool, related ...*Medium) error {
	return o.SetMedia(ctx, boil.GetContextDB(), insert, related...)
}

// SetMedia removes all previously related items of the
// recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Recipes's Media accordingly.
// Replaces o.R.Media with related.
// Sets related.R.Recipes's Media accordingly.
func (o *Recipe) SetMedia(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Medium) error {
	query := "delete from \"recipe_media\" where \"recipe_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMediaFromRecipesSlice(o, related)
	if o.R != nil {
		o.R.Media = nil
	}

	return o.AddMedia(ctx, exec, insert, related...)
}

// RemoveMediaG relationships from objects passed in.
// Removes related items from R.Media (uses pointer comparison, removal does not keep order)
// Sets related.R.Recipes.
// Uses the global database handle.
func (o *Recipe) RemoveMediaG(ctx context.Context, related ...*Medium) error {
	return o.RemoveMedia(ctx, boil.GetContextDB(), related...)
}

// RemoveMedia relationships from objects passed in.
// Removes related items from R.Media (uses pointer comparison, removal does not keep order)
// Sets related.R.Recipes.
func (o *Recipe) RemoveMedia(ctx context.Context, exec boil.ContextExecutor, related ...*Medium) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"recipe_media\" where \"recipe_id\" = $1 and \"media_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMediaFromRecipesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Media {
			if rel != ri {
				continue
			}

			ln := len(o.R.Media)
			if ln > 1 && i < ln-1 {
				o.R.Media[i] = o.R.Media[ln-1]
			}
			o.R.Media = o.R.Media[:ln-1]
			break
		}
	}

	return nil
}

func removeMediaFromRecipesSlice(o *Recipe, related []*Medium) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Recipes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Recipes)
			if ln > 1 && i < ln-1 {
				rel.R.Recipes[i] = rel.R.Recipes[ln-1]
			}
			rel.R.Recipes = rel.R.Recipes[:ln-1]
			break
		}
	}
}

// Recipes retrieves all the records using an executor.
func Recipes(mods ...qm.QueryMod) recipeQuery {
	mods = append(mods, qm.From("\"recipes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recipes\".*"})
	}

	return recipeQuery{q}
}

// FindRecipeG retrieves a single record by ID.
func FindRecipeG(ctx context.Context, iD int, selectCols ...string) (*Recipe, error) {
	return FindRecipe(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRecipe retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipe(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Recipe, error) {
	recipeObj := &Recipe{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipes")
	}

	if err = recipeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recipeObj, err
	}

	return recipeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Recipe) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recipe) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeInsertCacheMut.RLock()
	cache, cached := recipeInsertCache[key]
	recipeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipes")
	}

	if !cached {
		recipeInsertCacheMut.Lock()
		recipeInsertCache[key] = cache
		recipeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Recipe record using the global executor.
// See Update for more documentation.
func (o *Recipe) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Recipe.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recipe) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeUpdateCacheMut.RLock()
	cache, cached := recipeUpdateCache[key]
	recipeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, append(wl, recipePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipes")
	}

	if !cached {
		recipeUpdateCacheMut.Lock()
		recipeUpdateCache[key] = cache
		recipeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q recipeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RecipeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipe")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Recipe) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recipe) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeUpsertCacheMut.RLock()
	cache, cached := recipeUpsertCache[key]
	recipeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipePrimaryKeyColumns))
			copy(conflict, recipePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipes")
	}

	if !cached {
		recipeUpsertCacheMut.Lock()
		recipeUpsertCache[key] = cache
		recipeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Recipe record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Recipe) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Recipe record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recipe) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Recipe provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipePrimaryKeyMapping)
	sql := "DELETE FROM \"recipes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q recipeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q recipeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RecipeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipes")
	}

	if len(recipeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Recipe) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Recipe provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recipe) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipe(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RecipeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipes\".* FROM \"recipes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeSlice")
	}

	*o = slice

	return nil
}

// RecipeExistsG checks if the Recipe row exists.
func RecipeExistsG(ctx context.Context, iD int) (bool, error) {
	return RecipeExists(ctx, boil.GetContextDB(), iD)
}

// RecipeExists checks if the Recipe row exists.
func RecipeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipes exists")
	}

	return exists, nil
}

// Exists checks if the Recipe row exists.
func (o *Recipe) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecipeExists(ctx, exec, o.ID)
}
