// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CurriculumVitae is an object representing the database table.
type CurriculumVitae struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	JobTitle    string      `boil:"job_title" json:"job_title" toml:"job_title" yaml:"job_title"`
	Employer    string      `boil:"employer" json:"employer" toml:"employer" yaml:"employer"`
	StartDate   time.Time   `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate     null.Time   `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Type        CVType      `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *curriculumVitaeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L curriculumVitaeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurriculumVitaeColumns = struct {
	ID          string
	JobTitle    string
	Employer    string
	StartDate   string
	EndDate     string
	Description string
	Type        string
	CreatedAt   string
}{
	ID:          "id",
	JobTitle:    "job_title",
	Employer:    "employer",
	StartDate:   "start_date",
	EndDate:     "end_date",
	Description: "description",
	Type:        "type",
	CreatedAt:   "created_at",
}

var CurriculumVitaeTableColumns = struct {
	ID          string
	JobTitle    string
	Employer    string
	StartDate   string
	EndDate     string
	Description string
	Type        string
	CreatedAt   string
}{
	ID:          "curriculum_vitae.id",
	JobTitle:    "curriculum_vitae.job_title",
	Employer:    "curriculum_vitae.employer",
	StartDate:   "curriculum_vitae.start_date",
	EndDate:     "curriculum_vitae.end_date",
	Description: "curriculum_vitae.description",
	Type:        "curriculum_vitae.type",
	CreatedAt:   "curriculum_vitae.created_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperCVType struct{ field string }

func (w whereHelperCVType) EQ(x CVType) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperCVType) NEQ(x CVType) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperCVType) LT(x CVType) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperCVType) LTE(x CVType) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperCVType) GT(x CVType) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperCVType) GTE(x CVType) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperCVType) IN(slice []CVType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperCVType) NIN(slice []CVType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CurriculumVitaeWhere = struct {
	ID          whereHelperint
	JobTitle    whereHelperstring
	Employer    whereHelperstring
	StartDate   whereHelpertime_Time
	EndDate     whereHelpernull_Time
	Description whereHelpernull_String
	Type        whereHelperCVType
	CreatedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"curriculum_vitae\".\"id\""},
	JobTitle:    whereHelperstring{field: "\"curriculum_vitae\".\"job_title\""},
	Employer:    whereHelperstring{field: "\"curriculum_vitae\".\"employer\""},
	StartDate:   whereHelpertime_Time{field: "\"curriculum_vitae\".\"start_date\""},
	EndDate:     whereHelpernull_Time{field: "\"curriculum_vitae\".\"end_date\""},
	Description: whereHelpernull_String{field: "\"curriculum_vitae\".\"description\""},
	Type:        whereHelperCVType{field: "\"curriculum_vitae\".\"type\""},
	CreatedAt:   whereHelpernull_Time{field: "\"curriculum_vitae\".\"created_at\""},
}

// CurriculumVitaeRels is where relationship names are stored.
var CurriculumVitaeRels = struct {
	CurriculumVitaeProjects string
	CurriculumVitaeSkills   string
}{
	CurriculumVitaeProjects: "CurriculumVitaeProjects",
	CurriculumVitaeSkills:   "CurriculumVitaeSkills",
}

// curriculumVitaeR is where relationships are stored.
type curriculumVitaeR struct {
	CurriculumVitaeProjects CurriculumVitaeProjectSlice `boil:"CurriculumVitaeProjects" json:"CurriculumVitaeProjects" toml:"CurriculumVitaeProjects" yaml:"CurriculumVitaeProjects"`
	CurriculumVitaeSkills   CurriculumVitaeSkillSlice   `boil:"CurriculumVitaeSkills" json:"CurriculumVitaeSkills" toml:"CurriculumVitaeSkills" yaml:"CurriculumVitaeSkills"`
}

// NewStruct creates a new relationship struct
func (*curriculumVitaeR) NewStruct() *curriculumVitaeR {
	return &curriculumVitaeR{}
}

func (r *curriculumVitaeR) GetCurriculumVitaeProjects() CurriculumVitaeProjectSlice {
	if r == nil {
		return nil
	}
	return r.CurriculumVitaeProjects
}

func (r *curriculumVitaeR) GetCurriculumVitaeSkills() CurriculumVitaeSkillSlice {
	if r == nil {
		return nil
	}
	return r.CurriculumVitaeSkills
}

// curriculumVitaeL is where Load methods for each relationship are stored.
type curriculumVitaeL struct{}

var (
	curriculumVitaeAllColumns            = []string{"id", "job_title", "employer", "start_date", "end_date", "description", "type", "created_at"}
	curriculumVitaeColumnsWithoutDefault = []string{"job_title", "employer", "start_date", "type"}
	curriculumVitaeColumnsWithDefault    = []string{"id", "end_date", "description", "created_at"}
	curriculumVitaePrimaryKeyColumns     = []string{"id"}
	curriculumVitaeGeneratedColumns      = []string{}
)

type (
	// CurriculumVitaeSlice is an alias for a slice of pointers to CurriculumVitae.
	// This should almost always be used instead of []CurriculumVitae.
	CurriculumVitaeSlice []*CurriculumVitae
	// CurriculumVitaeHook is the signature for custom CurriculumVitae hook methods
	CurriculumVitaeHook func(context.Context, boil.ContextExecutor, *CurriculumVitae) error

	curriculumVitaeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	curriculumVitaeType                 = reflect.TypeOf(&CurriculumVitae{})
	curriculumVitaeMapping              = queries.MakeStructMapping(curriculumVitaeType)
	curriculumVitaePrimaryKeyMapping, _ = queries.BindMapping(curriculumVitaeType, curriculumVitaeMapping, curriculumVitaePrimaryKeyColumns)
	curriculumVitaeInsertCacheMut       sync.RWMutex
	curriculumVitaeInsertCache          = make(map[string]insertCache)
	curriculumVitaeUpdateCacheMut       sync.RWMutex
	curriculumVitaeUpdateCache          = make(map[string]updateCache)
	curriculumVitaeUpsertCacheMut       sync.RWMutex
	curriculumVitaeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var curriculumVitaeAfterSelectHooks []CurriculumVitaeHook

var curriculumVitaeBeforeInsertHooks []CurriculumVitaeHook
var curriculumVitaeAfterInsertHooks []CurriculumVitaeHook

var curriculumVitaeBeforeUpdateHooks []CurriculumVitaeHook
var curriculumVitaeAfterUpdateHooks []CurriculumVitaeHook

var curriculumVitaeBeforeDeleteHooks []CurriculumVitaeHook
var curriculumVitaeAfterDeleteHooks []CurriculumVitaeHook

var curriculumVitaeBeforeUpsertHooks []CurriculumVitaeHook
var curriculumVitaeAfterUpsertHooks []CurriculumVitaeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurriculumVitae) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurriculumVitae) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurriculumVitae) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurriculumVitae) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurriculumVitae) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurriculumVitae) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurriculumVitae) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurriculumVitae) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurriculumVitae) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range curriculumVitaeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurriculumVitaeHook registers your hook function for all future operations.
func AddCurriculumVitaeHook(hookPoint boil.HookPoint, curriculumVitaeHook CurriculumVitaeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		curriculumVitaeAfterSelectHooks = append(curriculumVitaeAfterSelectHooks, curriculumVitaeHook)
	case boil.BeforeInsertHook:
		curriculumVitaeBeforeInsertHooks = append(curriculumVitaeBeforeInsertHooks, curriculumVitaeHook)
	case boil.AfterInsertHook:
		curriculumVitaeAfterInsertHooks = append(curriculumVitaeAfterInsertHooks, curriculumVitaeHook)
	case boil.BeforeUpdateHook:
		curriculumVitaeBeforeUpdateHooks = append(curriculumVitaeBeforeUpdateHooks, curriculumVitaeHook)
	case boil.AfterUpdateHook:
		curriculumVitaeAfterUpdateHooks = append(curriculumVitaeAfterUpdateHooks, curriculumVitaeHook)
	case boil.BeforeDeleteHook:
		curriculumVitaeBeforeDeleteHooks = append(curriculumVitaeBeforeDeleteHooks, curriculumVitaeHook)
	case boil.AfterDeleteHook:
		curriculumVitaeAfterDeleteHooks = append(curriculumVitaeAfterDeleteHooks, curriculumVitaeHook)
	case boil.BeforeUpsertHook:
		curriculumVitaeBeforeUpsertHooks = append(curriculumVitaeBeforeUpsertHooks, curriculumVitaeHook)
	case boil.AfterUpsertHook:
		curriculumVitaeAfterUpsertHooks = append(curriculumVitaeAfterUpsertHooks, curriculumVitaeHook)
	}
}

// OneG returns a single curriculumVitae record from the query using the global executor.
func (q curriculumVitaeQuery) OneG(ctx context.Context) (*CurriculumVitae, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single curriculumVitae record from the query.
func (q curriculumVitaeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurriculumVitae, error) {
	o := &CurriculumVitae{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for curriculum_vitae")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CurriculumVitae records from the query using the global executor.
func (q curriculumVitaeQuery) AllG(ctx context.Context) (CurriculumVitaeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CurriculumVitae records from the query.
func (q curriculumVitaeQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurriculumVitaeSlice, error) {
	var o []*CurriculumVitae

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurriculumVitae slice")
	}

	if len(curriculumVitaeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CurriculumVitae records in the query using the global executor
func (q curriculumVitaeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CurriculumVitae records in the query.
func (q curriculumVitaeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count curriculum_vitae rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q curriculumVitaeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q curriculumVitaeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if curriculum_vitae exists")
	}

	return count > 0, nil
}

// CurriculumVitaeProjects retrieves all the curriculum_vitae_project's CurriculumVitaeProjects with an executor.
func (o *CurriculumVitae) CurriculumVitaeProjects(mods ...qm.QueryMod) curriculumVitaeProjectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"curriculum_vitae_projects\".\"curriculum_vitae_id\"=?", o.ID),
	)

	return CurriculumVitaeProjects(queryMods...)
}

// CurriculumVitaeSkills retrieves all the curriculum_vitae_skill's CurriculumVitaeSkills with an executor.
func (o *CurriculumVitae) CurriculumVitaeSkills(mods ...qm.QueryMod) curriculumVitaeSkillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"curriculum_vitae_skills\".\"curriculum_vitae_id\"=?", o.ID),
	)

	return CurriculumVitaeSkills(queryMods...)
}

// LoadCurriculumVitaeProjects allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (curriculumVitaeL) LoadCurriculumVitaeProjects(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurriculumVitae interface{}, mods queries.Applicator) error {
	var slice []*CurriculumVitae
	var object *CurriculumVitae

	if singular {
		var ok bool
		object, ok = maybeCurriculumVitae.(*CurriculumVitae)
		if !ok {
			object = new(CurriculumVitae)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurriculumVitae)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurriculumVitae))
			}
		}
	} else {
		s, ok := maybeCurriculumVitae.(*[]*CurriculumVitae)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurriculumVitae)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurriculumVitae))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &curriculumVitaeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &curriculumVitaeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`curriculum_vitae_projects`),
		qm.WhereIn(`curriculum_vitae_projects.curriculum_vitae_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load curriculum_vitae_projects")
	}

	var resultSlice []*CurriculumVitaeProject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice curriculum_vitae_projects")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on curriculum_vitae_projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for curriculum_vitae_projects")
	}

	if len(curriculumVitaeProjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CurriculumVitaeProjects = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &curriculumVitaeProjectR{}
			}
			foreign.R.CurriculumVitae = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CurriculumVitaeID {
				local.R.CurriculumVitaeProjects = append(local.R.CurriculumVitaeProjects, foreign)
				if foreign.R == nil {
					foreign.R = &curriculumVitaeProjectR{}
				}
				foreign.R.CurriculumVitae = local
				break
			}
		}
	}

	return nil
}

// LoadCurriculumVitaeSkills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (curriculumVitaeL) LoadCurriculumVitaeSkills(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurriculumVitae interface{}, mods queries.Applicator) error {
	var slice []*CurriculumVitae
	var object *CurriculumVitae

	if singular {
		var ok bool
		object, ok = maybeCurriculumVitae.(*CurriculumVitae)
		if !ok {
			object = new(CurriculumVitae)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurriculumVitae)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurriculumVitae))
			}
		}
	} else {
		s, ok := maybeCurriculumVitae.(*[]*CurriculumVitae)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurriculumVitae)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurriculumVitae))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &curriculumVitaeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &curriculumVitaeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`curriculum_vitae_skills`),
		qm.WhereIn(`curriculum_vitae_skills.curriculum_vitae_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load curriculum_vitae_skills")
	}

	var resultSlice []*CurriculumVitaeSkill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice curriculum_vitae_skills")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on curriculum_vitae_skills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for curriculum_vitae_skills")
	}

	if len(curriculumVitaeSkillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CurriculumVitaeSkills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &curriculumVitaeSkillR{}
			}
			foreign.R.CurriculumVitae = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CurriculumVitaeID {
				local.R.CurriculumVitaeSkills = append(local.R.CurriculumVitaeSkills, foreign)
				if foreign.R == nil {
					foreign.R = &curriculumVitaeSkillR{}
				}
				foreign.R.CurriculumVitae = local
				break
			}
		}
	}

	return nil
}

// AddCurriculumVitaeProjectsG adds the given related objects to the existing relationships
// of the curriculum_vitae, optionally inserting them as new records.
// Appends related to o.R.CurriculumVitaeProjects.
// Sets related.R.CurriculumVitae appropriately.
// Uses the global database handle.
func (o *CurriculumVitae) AddCurriculumVitaeProjectsG(ctx context.Context, insert bool, related ...*CurriculumVitaeProject) error {
	return o.AddCurriculumVitaeProjects(ctx, boil.GetContextDB(), insert, related...)
}

// AddCurriculumVitaeProjects adds the given related objects to the existing relationships
// of the curriculum_vitae, optionally inserting them as new records.
// Appends related to o.R.CurriculumVitaeProjects.
// Sets related.R.CurriculumVitae appropriately.
func (o *CurriculumVitae) AddCurriculumVitaeProjects(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CurriculumVitaeProject) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CurriculumVitaeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"curriculum_vitae_projects\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"curriculum_vitae_id"}),
				strmangle.WhereClause("\"", "\"", 2, curriculumVitaeProjectPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CurriculumVitaeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &curriculumVitaeR{
			CurriculumVitaeProjects: related,
		}
	} else {
		o.R.CurriculumVitaeProjects = append(o.R.CurriculumVitaeProjects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &curriculumVitaeProjectR{
				CurriculumVitae: o,
			}
		} else {
			rel.R.CurriculumVitae = o
		}
	}
	return nil
}

// AddCurriculumVitaeSkillsG adds the given related objects to the existing relationships
// of the curriculum_vitae, optionally inserting them as new records.
// Appends related to o.R.CurriculumVitaeSkills.
// Sets related.R.CurriculumVitae appropriately.
// Uses the global database handle.
func (o *CurriculumVitae) AddCurriculumVitaeSkillsG(ctx context.Context, insert bool, related ...*CurriculumVitaeSkill) error {
	return o.AddCurriculumVitaeSkills(ctx, boil.GetContextDB(), insert, related...)
}

// AddCurriculumVitaeSkills adds the given related objects to the existing relationships
// of the curriculum_vitae, optionally inserting them as new records.
// Appends related to o.R.CurriculumVitaeSkills.
// Sets related.R.CurriculumVitae appropriately.
func (o *CurriculumVitae) AddCurriculumVitaeSkills(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CurriculumVitaeSkill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CurriculumVitaeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"curriculum_vitae_skills\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"curriculum_vitae_id"}),
				strmangle.WhereClause("\"", "\"", 2, curriculumVitaeSkillPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CurriculumVitaeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &curriculumVitaeR{
			CurriculumVitaeSkills: related,
		}
	} else {
		o.R.CurriculumVitaeSkills = append(o.R.CurriculumVitaeSkills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &curriculumVitaeSkillR{
				CurriculumVitae: o,
			}
		} else {
			rel.R.CurriculumVitae = o
		}
	}
	return nil
}

// CurriculumVitaes retrieves all the records using an executor.
func CurriculumVitaes(mods ...qm.QueryMod) curriculumVitaeQuery {
	mods = append(mods, qm.From("\"curriculum_vitae\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"curriculum_vitae\".*"})
	}

	return curriculumVitaeQuery{q}
}

// FindCurriculumVitaeG retrieves a single record by ID.
func FindCurriculumVitaeG(ctx context.Context, iD int, selectCols ...string) (*CurriculumVitae, error) {
	return FindCurriculumVitae(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCurriculumVitae retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurriculumVitae(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CurriculumVitae, error) {
	curriculumVitaeObj := &CurriculumVitae{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"curriculum_vitae\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, curriculumVitaeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from curriculum_vitae")
	}

	if err = curriculumVitaeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return curriculumVitaeObj, err
	}

	return curriculumVitaeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CurriculumVitae) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurriculumVitae) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no curriculum_vitae provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(curriculumVitaeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	curriculumVitaeInsertCacheMut.RLock()
	cache, cached := curriculumVitaeInsertCache[key]
	curriculumVitaeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			curriculumVitaeAllColumns,
			curriculumVitaeColumnsWithDefault,
			curriculumVitaeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(curriculumVitaeType, curriculumVitaeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(curriculumVitaeType, curriculumVitaeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"curriculum_vitae\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"curriculum_vitae\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into curriculum_vitae")
	}

	if !cached {
		curriculumVitaeInsertCacheMut.Lock()
		curriculumVitaeInsertCache[key] = cache
		curriculumVitaeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CurriculumVitae record using the global executor.
// See Update for more documentation.
func (o *CurriculumVitae) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CurriculumVitae.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurriculumVitae) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	curriculumVitaeUpdateCacheMut.RLock()
	cache, cached := curriculumVitaeUpdateCache[key]
	curriculumVitaeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			curriculumVitaeAllColumns,
			curriculumVitaePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update curriculum_vitae, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"curriculum_vitae\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, curriculumVitaePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(curriculumVitaeType, curriculumVitaeMapping, append(wl, curriculumVitaePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update curriculum_vitae row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for curriculum_vitae")
	}

	if !cached {
		curriculumVitaeUpdateCacheMut.Lock()
		curriculumVitaeUpdateCache[key] = cache
		curriculumVitaeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q curriculumVitaeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q curriculumVitaeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for curriculum_vitae")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for curriculum_vitae")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CurriculumVitaeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurriculumVitaeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), curriculumVitaePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"curriculum_vitae\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, curriculumVitaePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in curriculumVitae slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all curriculumVitae")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CurriculumVitae) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurriculumVitae) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no curriculum_vitae provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(curriculumVitaeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	curriculumVitaeUpsertCacheMut.RLock()
	cache, cached := curriculumVitaeUpsertCache[key]
	curriculumVitaeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			curriculumVitaeAllColumns,
			curriculumVitaeColumnsWithDefault,
			curriculumVitaeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			curriculumVitaeAllColumns,
			curriculumVitaePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert curriculum_vitae, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(curriculumVitaePrimaryKeyColumns))
			copy(conflict, curriculumVitaePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"curriculum_vitae\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(curriculumVitaeType, curriculumVitaeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(curriculumVitaeType, curriculumVitaeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert curriculum_vitae")
	}

	if !cached {
		curriculumVitaeUpsertCacheMut.Lock()
		curriculumVitaeUpsertCache[key] = cache
		curriculumVitaeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CurriculumVitae record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CurriculumVitae) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CurriculumVitae record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurriculumVitae) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurriculumVitae provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), curriculumVitaePrimaryKeyMapping)
	sql := "DELETE FROM \"curriculum_vitae\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from curriculum_vitae")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for curriculum_vitae")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q curriculumVitaeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q curriculumVitaeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no curriculumVitaeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from curriculum_vitae")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for curriculum_vitae")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CurriculumVitaeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurriculumVitaeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(curriculumVitaeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), curriculumVitaePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"curriculum_vitae\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, curriculumVitaePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from curriculumVitae slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for curriculum_vitae")
	}

	if len(curriculumVitaeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CurriculumVitae) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CurriculumVitae provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurriculumVitae) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurriculumVitae(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurriculumVitaeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CurriculumVitaeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurriculumVitaeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurriculumVitaeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), curriculumVitaePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"curriculum_vitae\".* FROM \"curriculum_vitae\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, curriculumVitaePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurriculumVitaeSlice")
	}

	*o = slice

	return nil
}

// CurriculumVitaeExistsG checks if the CurriculumVitae row exists.
func CurriculumVitaeExistsG(ctx context.Context, iD int) (bool, error) {
	return CurriculumVitaeExists(ctx, boil.GetContextDB(), iD)
}

// CurriculumVitaeExists checks if the CurriculumVitae row exists.
func CurriculumVitaeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"curriculum_vitae\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if curriculum_vitae exists")
	}

	return exists, nil
}

// Exists checks if the CurriculumVitae row exists.
func (o *CurriculumVitae) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CurriculumVitaeExists(ctx, exec, o.ID)
}
