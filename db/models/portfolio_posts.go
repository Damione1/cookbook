// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PortfolioPost is an object representing the database table.
type PortfolioPost struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug      string    `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Content   string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	ImageID   null.Int  `boil:"image_id" json:"image_id,omitempty" toml:"image_id" yaml:"image_id,omitempty"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *portfolioPostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portfolioPostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortfolioPostColumns = struct {
	ID        string
	Title     string
	Slug      string
	Content   string
	ImageID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Title:     "title",
	Slug:      "slug",
	Content:   "content",
	ImageID:   "image_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var PortfolioPostTableColumns = struct {
	ID        string
	Title     string
	Slug      string
	Content   string
	ImageID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "portfolio_posts.id",
	Title:     "portfolio_posts.title",
	Slug:      "portfolio_posts.slug",
	Content:   "portfolio_posts.content",
	ImageID:   "portfolio_posts.image_id",
	CreatedAt: "portfolio_posts.created_at",
	UpdatedAt: "portfolio_posts.updated_at",
	DeletedAt: "portfolio_posts.deleted_at",
}

// Generated where

var PortfolioPostWhere = struct {
	ID        whereHelperint
	Title     whereHelperstring
	Slug      whereHelperstring
	Content   whereHelperstring
	ImageID   whereHelpernull_Int
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"portfolio_posts\".\"id\""},
	Title:     whereHelperstring{field: "\"portfolio_posts\".\"title\""},
	Slug:      whereHelperstring{field: "\"portfolio_posts\".\"slug\""},
	Content:   whereHelperstring{field: "\"portfolio_posts\".\"content\""},
	ImageID:   whereHelpernull_Int{field: "\"portfolio_posts\".\"image_id\""},
	CreatedAt: whereHelpernull_Time{field: "\"portfolio_posts\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"portfolio_posts\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"portfolio_posts\".\"deleted_at\""},
}

// PortfolioPostRels is where relationship names are stored.
var PortfolioPostRels = struct {
	Image string
}{
	Image: "Image",
}

// portfolioPostR is where relationships are stored.
type portfolioPostR struct {
	Image *Medium `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
}

// NewStruct creates a new relationship struct
func (*portfolioPostR) NewStruct() *portfolioPostR {
	return &portfolioPostR{}
}

func (r *portfolioPostR) GetImage() *Medium {
	if r == nil {
		return nil
	}
	return r.Image
}

// portfolioPostL is where Load methods for each relationship are stored.
type portfolioPostL struct{}

var (
	portfolioPostAllColumns            = []string{"id", "title", "slug", "content", "image_id", "created_at", "updated_at", "deleted_at"}
	portfolioPostColumnsWithoutDefault = []string{"title", "slug", "content"}
	portfolioPostColumnsWithDefault    = []string{"id", "image_id", "created_at", "updated_at", "deleted_at"}
	portfolioPostPrimaryKeyColumns     = []string{"id"}
	portfolioPostGeneratedColumns      = []string{}
)

type (
	// PortfolioPostSlice is an alias for a slice of pointers to PortfolioPost.
	// This should almost always be used instead of []PortfolioPost.
	PortfolioPostSlice []*PortfolioPost
	// PortfolioPostHook is the signature for custom PortfolioPost hook methods
	PortfolioPostHook func(context.Context, boil.ContextExecutor, *PortfolioPost) error

	portfolioPostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portfolioPostType                 = reflect.TypeOf(&PortfolioPost{})
	portfolioPostMapping              = queries.MakeStructMapping(portfolioPostType)
	portfolioPostPrimaryKeyMapping, _ = queries.BindMapping(portfolioPostType, portfolioPostMapping, portfolioPostPrimaryKeyColumns)
	portfolioPostInsertCacheMut       sync.RWMutex
	portfolioPostInsertCache          = make(map[string]insertCache)
	portfolioPostUpdateCacheMut       sync.RWMutex
	portfolioPostUpdateCache          = make(map[string]updateCache)
	portfolioPostUpsertCacheMut       sync.RWMutex
	portfolioPostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portfolioPostAfterSelectHooks []PortfolioPostHook

var portfolioPostBeforeInsertHooks []PortfolioPostHook
var portfolioPostAfterInsertHooks []PortfolioPostHook

var portfolioPostBeforeUpdateHooks []PortfolioPostHook
var portfolioPostAfterUpdateHooks []PortfolioPostHook

var portfolioPostBeforeDeleteHooks []PortfolioPostHook
var portfolioPostAfterDeleteHooks []PortfolioPostHook

var portfolioPostBeforeUpsertHooks []PortfolioPostHook
var portfolioPostAfterUpsertHooks []PortfolioPostHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PortfolioPost) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PortfolioPost) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PortfolioPost) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PortfolioPost) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PortfolioPost) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PortfolioPost) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PortfolioPost) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PortfolioPost) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PortfolioPost) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioPostAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortfolioPostHook registers your hook function for all future operations.
func AddPortfolioPostHook(hookPoint boil.HookPoint, portfolioPostHook PortfolioPostHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		portfolioPostAfterSelectHooks = append(portfolioPostAfterSelectHooks, portfolioPostHook)
	case boil.BeforeInsertHook:
		portfolioPostBeforeInsertHooks = append(portfolioPostBeforeInsertHooks, portfolioPostHook)
	case boil.AfterInsertHook:
		portfolioPostAfterInsertHooks = append(portfolioPostAfterInsertHooks, portfolioPostHook)
	case boil.BeforeUpdateHook:
		portfolioPostBeforeUpdateHooks = append(portfolioPostBeforeUpdateHooks, portfolioPostHook)
	case boil.AfterUpdateHook:
		portfolioPostAfterUpdateHooks = append(portfolioPostAfterUpdateHooks, portfolioPostHook)
	case boil.BeforeDeleteHook:
		portfolioPostBeforeDeleteHooks = append(portfolioPostBeforeDeleteHooks, portfolioPostHook)
	case boil.AfterDeleteHook:
		portfolioPostAfterDeleteHooks = append(portfolioPostAfterDeleteHooks, portfolioPostHook)
	case boil.BeforeUpsertHook:
		portfolioPostBeforeUpsertHooks = append(portfolioPostBeforeUpsertHooks, portfolioPostHook)
	case boil.AfterUpsertHook:
		portfolioPostAfterUpsertHooks = append(portfolioPostAfterUpsertHooks, portfolioPostHook)
	}
}

// OneG returns a single portfolioPost record from the query using the global executor.
func (q portfolioPostQuery) OneG(ctx context.Context) (*PortfolioPost, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single portfolioPost record from the query.
func (q portfolioPostQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PortfolioPost, error) {
	o := &PortfolioPost{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for portfolio_posts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PortfolioPost records from the query using the global executor.
func (q portfolioPostQuery) AllG(ctx context.Context) (PortfolioPostSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PortfolioPost records from the query.
func (q portfolioPostQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortfolioPostSlice, error) {
	var o []*PortfolioPost

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PortfolioPost slice")
	}

	if len(portfolioPostAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PortfolioPost records in the query using the global executor
func (q portfolioPostQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PortfolioPost records in the query.
func (q portfolioPostQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count portfolio_posts rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q portfolioPostQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q portfolioPostQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if portfolio_posts exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *PortfolioPost) Image(mods ...qm.QueryMod) mediumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Media(queryMods...)
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portfolioPostL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolioPost interface{}, mods queries.Applicator) error {
	var slice []*PortfolioPost
	var object *PortfolioPost

	if singular {
		var ok bool
		object, ok = maybePortfolioPost.(*PortfolioPost)
		if !ok {
			object = new(PortfolioPost)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePortfolioPost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePortfolioPost))
			}
		}
	} else {
		s, ok := maybePortfolioPost.(*[]*PortfolioPost)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePortfolioPost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePortfolioPost))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioPostR{}
		}
		if !queries.IsNil(object.ImageID) {
			args = append(args, object.ImageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioPostR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ImageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ImageID) {
				args = append(args, obj.ImageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`media`),
		qm.WhereIn(`media.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Medium")
	}

	var resultSlice []*Medium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Medium")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media")
	}

	if len(mediumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &mediumR{}
		}
		foreign.R.ImagePortfolioPosts = append(foreign.R.ImagePortfolioPosts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ImageID, foreign.ID) {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &mediumR{}
				}
				foreign.R.ImagePortfolioPosts = append(foreign.R.ImagePortfolioPosts, local)
				break
			}
		}
	}

	return nil
}

// SetImageG of the portfolioPost to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImagePortfolioPosts.
// Uses the global database handle.
func (o *PortfolioPost) SetImageG(ctx context.Context, insert bool, related *Medium) error {
	return o.SetImage(ctx, boil.GetContextDB(), insert, related)
}

// SetImage of the portfolioPost to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImagePortfolioPosts.
func (o *PortfolioPost) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Medium) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"portfolio_posts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, portfolioPostPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ImageID, related.ID)
	if o.R == nil {
		o.R = &portfolioPostR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &mediumR{
			ImagePortfolioPosts: PortfolioPostSlice{o},
		}
	} else {
		related.R.ImagePortfolioPosts = append(related.R.ImagePortfolioPosts, o)
	}

	return nil
}

// RemoveImageG relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *PortfolioPost) RemoveImageG(ctx context.Context, related *Medium) error {
	return o.RemoveImage(ctx, boil.GetContextDB(), related)
}

// RemoveImage relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PortfolioPost) RemoveImage(ctx context.Context, exec boil.ContextExecutor, related *Medium) error {
	var err error

	queries.SetScanner(&o.ImageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Image = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ImagePortfolioPosts {
		if queries.Equal(o.ImageID, ri.ImageID) {
			continue
		}

		ln := len(related.R.ImagePortfolioPosts)
		if ln > 1 && i < ln-1 {
			related.R.ImagePortfolioPosts[i] = related.R.ImagePortfolioPosts[ln-1]
		}
		related.R.ImagePortfolioPosts = related.R.ImagePortfolioPosts[:ln-1]
		break
	}
	return nil
}

// PortfolioPosts retrieves all the records using an executor.
func PortfolioPosts(mods ...qm.QueryMod) portfolioPostQuery {
	mods = append(mods, qm.From("\"portfolio_posts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"portfolio_posts\".*"})
	}

	return portfolioPostQuery{q}
}

// FindPortfolioPostG retrieves a single record by ID.
func FindPortfolioPostG(ctx context.Context, iD int, selectCols ...string) (*PortfolioPost, error) {
	return FindPortfolioPost(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPortfolioPost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortfolioPost(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PortfolioPost, error) {
	portfolioPostObj := &PortfolioPost{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"portfolio_posts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, portfolioPostObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from portfolio_posts")
	}

	if err = portfolioPostObj.doAfterSelectHooks(ctx, exec); err != nil {
		return portfolioPostObj, err
	}

	return portfolioPostObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PortfolioPost) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PortfolioPost) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no portfolio_posts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portfolioPostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portfolioPostInsertCacheMut.RLock()
	cache, cached := portfolioPostInsertCache[key]
	portfolioPostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portfolioPostAllColumns,
			portfolioPostColumnsWithDefault,
			portfolioPostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portfolioPostType, portfolioPostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portfolioPostType, portfolioPostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"portfolio_posts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"portfolio_posts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into portfolio_posts")
	}

	if !cached {
		portfolioPostInsertCacheMut.Lock()
		portfolioPostInsertCache[key] = cache
		portfolioPostInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PortfolioPost record using the global executor.
// See Update for more documentation.
func (o *PortfolioPost) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PortfolioPost.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PortfolioPost) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portfolioPostUpdateCacheMut.RLock()
	cache, cached := portfolioPostUpdateCache[key]
	portfolioPostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portfolioPostAllColumns,
			portfolioPostPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update portfolio_posts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"portfolio_posts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, portfolioPostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portfolioPostType, portfolioPostMapping, append(wl, portfolioPostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update portfolio_posts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for portfolio_posts")
	}

	if !cached {
		portfolioPostUpdateCacheMut.Lock()
		portfolioPostUpdateCache[key] = cache
		portfolioPostUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q portfolioPostQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q portfolioPostQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for portfolio_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for portfolio_posts")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PortfolioPostSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortfolioPostSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"portfolio_posts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, portfolioPostPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in portfolioPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all portfolioPost")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PortfolioPost) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PortfolioPost) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no portfolio_posts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portfolioPostColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portfolioPostUpsertCacheMut.RLock()
	cache, cached := portfolioPostUpsertCache[key]
	portfolioPostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			portfolioPostAllColumns,
			portfolioPostColumnsWithDefault,
			portfolioPostColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			portfolioPostAllColumns,
			portfolioPostPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert portfolio_posts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(portfolioPostPrimaryKeyColumns))
			copy(conflict, portfolioPostPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"portfolio_posts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(portfolioPostType, portfolioPostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portfolioPostType, portfolioPostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert portfolio_posts")
	}

	if !cached {
		portfolioPostUpsertCacheMut.Lock()
		portfolioPostUpsertCache[key] = cache
		portfolioPostUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PortfolioPost record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PortfolioPost) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PortfolioPost record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PortfolioPost) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PortfolioPost provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portfolioPostPrimaryKeyMapping)
	sql := "DELETE FROM \"portfolio_posts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from portfolio_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for portfolio_posts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q portfolioPostQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q portfolioPostQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no portfolioPostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portfolio_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for portfolio_posts")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PortfolioPostSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortfolioPostSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(portfolioPostBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"portfolio_posts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, portfolioPostPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portfolioPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for portfolio_posts")
	}

	if len(portfolioPostAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PortfolioPost) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PortfolioPost provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PortfolioPost) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortfolioPost(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortfolioPostSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PortfolioPostSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortfolioPostSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortfolioPostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"portfolio_posts\".* FROM \"portfolio_posts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, portfolioPostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PortfolioPostSlice")
	}

	*o = slice

	return nil
}

// PortfolioPostExistsG checks if the PortfolioPost row exists.
func PortfolioPostExistsG(ctx context.Context, iD int) (bool, error) {
	return PortfolioPostExists(ctx, boil.GetContextDB(), iD)
}

// PortfolioPostExists checks if the PortfolioPost row exists.
func PortfolioPostExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"portfolio_posts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if portfolio_posts exists")
	}

	return exists, nil
}

// Exists checks if the PortfolioPost row exists.
func (o *PortfolioPost) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PortfolioPostExists(ctx, exec, o.ID)
}
