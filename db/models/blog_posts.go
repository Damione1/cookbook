// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlogPost is an object representing the database table.
type BlogPost struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug      string    `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Content   string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	ImageID   null.Int  `boil:"image_id" json:"image_id,omitempty" toml:"image_id" yaml:"image_id,omitempty"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *blogPostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blogPostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlogPostColumns = struct {
	ID        string
	Title     string
	Slug      string
	Content   string
	ImageID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Title:     "title",
	Slug:      "slug",
	Content:   "content",
	ImageID:   "image_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var BlogPostTableColumns = struct {
	ID        string
	Title     string
	Slug      string
	Content   string
	ImageID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "blog_posts.id",
	Title:     "blog_posts.title",
	Slug:      "blog_posts.slug",
	Content:   "blog_posts.content",
	ImageID:   "blog_posts.image_id",
	CreatedAt: "blog_posts.created_at",
	UpdatedAt: "blog_posts.updated_at",
	DeletedAt: "blog_posts.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BlogPostWhere = struct {
	ID        whereHelperint
	Title     whereHelperstring
	Slug      whereHelperstring
	Content   whereHelperstring
	ImageID   whereHelpernull_Int
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"blog_posts\".\"id\""},
	Title:     whereHelperstring{field: "\"blog_posts\".\"title\""},
	Slug:      whereHelperstring{field: "\"blog_posts\".\"slug\""},
	Content:   whereHelperstring{field: "\"blog_posts\".\"content\""},
	ImageID:   whereHelpernull_Int{field: "\"blog_posts\".\"image_id\""},
	CreatedAt: whereHelpernull_Time{field: "\"blog_posts\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"blog_posts\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"blog_posts\".\"deleted_at\""},
}

// BlogPostRels is where relationship names are stored.
var BlogPostRels = struct {
	Image string
}{
	Image: "Image",
}

// blogPostR is where relationships are stored.
type blogPostR struct {
	Image *Medium `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
}

// NewStruct creates a new relationship struct
func (*blogPostR) NewStruct() *blogPostR {
	return &blogPostR{}
}

func (r *blogPostR) GetImage() *Medium {
	if r == nil {
		return nil
	}
	return r.Image
}

// blogPostL is where Load methods for each relationship are stored.
type blogPostL struct{}

var (
	blogPostAllColumns            = []string{"id", "title", "slug", "content", "image_id", "created_at", "updated_at", "deleted_at"}
	blogPostColumnsWithoutDefault = []string{"title", "slug", "content"}
	blogPostColumnsWithDefault    = []string{"id", "image_id", "created_at", "updated_at", "deleted_at"}
	blogPostPrimaryKeyColumns     = []string{"id"}
	blogPostGeneratedColumns      = []string{}
)

type (
	// BlogPostSlice is an alias for a slice of pointers to BlogPost.
	// This should almost always be used instead of []BlogPost.
	BlogPostSlice []*BlogPost
	// BlogPostHook is the signature for custom BlogPost hook methods
	BlogPostHook func(context.Context, boil.ContextExecutor, *BlogPost) error

	blogPostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blogPostType                 = reflect.TypeOf(&BlogPost{})
	blogPostMapping              = queries.MakeStructMapping(blogPostType)
	blogPostPrimaryKeyMapping, _ = queries.BindMapping(blogPostType, blogPostMapping, blogPostPrimaryKeyColumns)
	blogPostInsertCacheMut       sync.RWMutex
	blogPostInsertCache          = make(map[string]insertCache)
	blogPostUpdateCacheMut       sync.RWMutex
	blogPostUpdateCache          = make(map[string]updateCache)
	blogPostUpsertCacheMut       sync.RWMutex
	blogPostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blogPostAfterSelectHooks []BlogPostHook

var blogPostBeforeInsertHooks []BlogPostHook
var blogPostAfterInsertHooks []BlogPostHook

var blogPostBeforeUpdateHooks []BlogPostHook
var blogPostAfterUpdateHooks []BlogPostHook

var blogPostBeforeDeleteHooks []BlogPostHook
var blogPostAfterDeleteHooks []BlogPostHook

var blogPostBeforeUpsertHooks []BlogPostHook
var blogPostAfterUpsertHooks []BlogPostHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlogPost) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlogPost) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlogPost) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlogPost) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlogPost) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlogPost) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlogPost) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlogPost) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlogPost) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogPostAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlogPostHook registers your hook function for all future operations.
func AddBlogPostHook(hookPoint boil.HookPoint, blogPostHook BlogPostHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blogPostAfterSelectHooks = append(blogPostAfterSelectHooks, blogPostHook)
	case boil.BeforeInsertHook:
		blogPostBeforeInsertHooks = append(blogPostBeforeInsertHooks, blogPostHook)
	case boil.AfterInsertHook:
		blogPostAfterInsertHooks = append(blogPostAfterInsertHooks, blogPostHook)
	case boil.BeforeUpdateHook:
		blogPostBeforeUpdateHooks = append(blogPostBeforeUpdateHooks, blogPostHook)
	case boil.AfterUpdateHook:
		blogPostAfterUpdateHooks = append(blogPostAfterUpdateHooks, blogPostHook)
	case boil.BeforeDeleteHook:
		blogPostBeforeDeleteHooks = append(blogPostBeforeDeleteHooks, blogPostHook)
	case boil.AfterDeleteHook:
		blogPostAfterDeleteHooks = append(blogPostAfterDeleteHooks, blogPostHook)
	case boil.BeforeUpsertHook:
		blogPostBeforeUpsertHooks = append(blogPostBeforeUpsertHooks, blogPostHook)
	case boil.AfterUpsertHook:
		blogPostAfterUpsertHooks = append(blogPostAfterUpsertHooks, blogPostHook)
	}
}

// One returns a single blogPost record from the query.
func (q blogPostQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BlogPost, error) {
	o := &BlogPost{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for blog_posts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlogPost records from the query.
func (q blogPostQuery) All(ctx context.Context, exec boil.ContextExecutor) (BlogPostSlice, error) {
	var o []*BlogPost

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BlogPost slice")
	}

	if len(blogPostAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlogPost records in the query.
func (q blogPostQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count blog_posts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blogPostQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if blog_posts exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *BlogPost) Image(mods ...qm.QueryMod) mediumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Media(queryMods...)
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blogPostL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBlogPost interface{}, mods queries.Applicator) error {
	var slice []*BlogPost
	var object *BlogPost

	if singular {
		var ok bool
		object, ok = maybeBlogPost.(*BlogPost)
		if !ok {
			object = new(BlogPost)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBlogPost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBlogPost))
			}
		}
	} else {
		s, ok := maybeBlogPost.(*[]*BlogPost)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBlogPost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBlogPost))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blogPostR{}
		}
		if !queries.IsNil(object.ImageID) {
			args = append(args, object.ImageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blogPostR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ImageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ImageID) {
				args = append(args, obj.ImageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`media`),
		qm.WhereIn(`media.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Medium")
	}

	var resultSlice []*Medium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Medium")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media")
	}

	if len(mediumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &mediumR{}
		}
		foreign.R.ImageBlogPosts = append(foreign.R.ImageBlogPosts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ImageID, foreign.ID) {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &mediumR{}
				}
				foreign.R.ImageBlogPosts = append(foreign.R.ImageBlogPosts, local)
				break
			}
		}
	}

	return nil
}

// SetImage of the blogPost to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImageBlogPosts.
func (o *BlogPost) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Medium) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blog_posts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, blogPostPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ImageID, related.ID)
	if o.R == nil {
		o.R = &blogPostR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &mediumR{
			ImageBlogPosts: BlogPostSlice{o},
		}
	} else {
		related.R.ImageBlogPosts = append(related.R.ImageBlogPosts, o)
	}

	return nil
}

// RemoveImage relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
func (o *BlogPost) RemoveImage(ctx context.Context, exec boil.ContextExecutor, related *Medium) error {
	var err error

	queries.SetScanner(&o.ImageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Image = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ImageBlogPosts {
		if queries.Equal(o.ImageID, ri.ImageID) {
			continue
		}

		ln := len(related.R.ImageBlogPosts)
		if ln > 1 && i < ln-1 {
			related.R.ImageBlogPosts[i] = related.R.ImageBlogPosts[ln-1]
		}
		related.R.ImageBlogPosts = related.R.ImageBlogPosts[:ln-1]
		break
	}
	return nil
}

// BlogPosts retrieves all the records using an executor.
func BlogPosts(mods ...qm.QueryMod) blogPostQuery {
	mods = append(mods, qm.From("\"blog_posts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"blog_posts\".*"})
	}

	return blogPostQuery{q}
}

// FindBlogPost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlogPost(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BlogPost, error) {
	blogPostObj := &BlogPost{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blog_posts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, blogPostObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from blog_posts")
	}

	if err = blogPostObj.doAfterSelectHooks(ctx, exec); err != nil {
		return blogPostObj, err
	}

	return blogPostObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlogPost) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no blog_posts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blogPostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blogPostInsertCacheMut.RLock()
	cache, cached := blogPostInsertCache[key]
	blogPostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blogPostAllColumns,
			blogPostColumnsWithDefault,
			blogPostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blogPostType, blogPostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blog_posts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blog_posts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into blog_posts")
	}

	if !cached {
		blogPostInsertCacheMut.Lock()
		blogPostInsertCache[key] = cache
		blogPostInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BlogPost.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlogPost) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blogPostUpdateCacheMut.RLock()
	cache, cached := blogPostUpdateCache[key]
	blogPostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blogPostAllColumns,
			blogPostPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update blog_posts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blog_posts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blogPostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, append(wl, blogPostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update blog_posts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for blog_posts")
	}

	if !cached {
		blogPostUpdateCacheMut.Lock()
		blogPostUpdateCache[key] = cache
		blogPostUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blogPostQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for blog_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for blog_posts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlogPostSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blog_posts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blogPostPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in blogPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all blogPost")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlogPost) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no blog_posts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blogPostColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blogPostUpsertCacheMut.RLock()
	cache, cached := blogPostUpsertCache[key]
	blogPostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blogPostAllColumns,
			blogPostColumnsWithDefault,
			blogPostColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blogPostAllColumns,
			blogPostPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert blog_posts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blogPostPrimaryKeyColumns))
			copy(conflict, blogPostPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blog_posts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blogPostType, blogPostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert blog_posts")
	}

	if !cached {
		blogPostUpsertCacheMut.Lock()
		blogPostUpsertCache[key] = cache
		blogPostUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BlogPost record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlogPost) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BlogPost provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blogPostPrimaryKeyMapping)
	sql := "DELETE FROM \"blog_posts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from blog_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for blog_posts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blogPostQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no blogPostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from blog_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for blog_posts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlogPostSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blogPostBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blog_posts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blogPostPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from blogPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for blog_posts")
	}

	if len(blogPostAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlogPost) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBlogPost(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlogPostSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlogPostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blog_posts\".* FROM \"blog_posts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blogPostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BlogPostSlice")
	}

	*o = slice

	return nil
}

// BlogPostExists checks if the BlogPost row exists.
func BlogPostExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blog_posts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if blog_posts exists")
	}

	return exists, nil
}

// Exists checks if the BlogPost row exists.
func (o *BlogPost) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BlogPostExists(ctx, exec, o.ID)
}
